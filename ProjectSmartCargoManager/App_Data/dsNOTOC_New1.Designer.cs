//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5472
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ProjectSmartCargoManager.App_Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsNOTOC_New")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsNOTOC_New : global::System.Data.DataSet {
        
        private dtNOTOC_NewDataTable tabledtNOTOC_New;
        
        private dtSubRpt_NewDataTable tabledtSubRpt_New;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsNOTOC_New() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsNOTOC_New(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dtNOTOC_New"] != null)) {
                    base.Tables.Add(new dtNOTOC_NewDataTable(ds.Tables["dtNOTOC_New"]));
                }
                if ((ds.Tables["dtSubRpt_New"] != null)) {
                    base.Tables.Add(new dtSubRpt_NewDataTable(ds.Tables["dtSubRpt_New"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtNOTOC_NewDataTable dtNOTOC_New {
            get {
                return this.tabledtNOTOC_New;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtSubRpt_NewDataTable dtSubRpt_New {
            get {
                return this.tabledtSubRpt_New;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsNOTOC_New cln = ((dsNOTOC_New)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dtNOTOC_New"] != null)) {
                    base.Tables.Add(new dtNOTOC_NewDataTable(ds.Tables["dtNOTOC_New"]));
                }
                if ((ds.Tables["dtSubRpt_New"] != null)) {
                    base.Tables.Add(new dtSubRpt_NewDataTable(ds.Tables["dtSubRpt_New"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledtNOTOC_New = ((dtNOTOC_NewDataTable)(base.Tables["dtNOTOC_New"]));
            if ((initTable == true)) {
                if ((this.tabledtNOTOC_New != null)) {
                    this.tabledtNOTOC_New.InitVars();
                }
            }
            this.tabledtSubRpt_New = ((dtSubRpt_NewDataTable)(base.Tables["dtSubRpt_New"]));
            if ((initTable == true)) {
                if ((this.tabledtSubRpt_New != null)) {
                    this.tabledtSubRpt_New.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsNOTOC_New";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsNOTOC_New.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledtNOTOC_New = new dtNOTOC_NewDataTable();
            base.Tables.Add(this.tabledtNOTOC_New);
            this.tabledtSubRpt_New = new dtSubRpt_NewDataTable();
            base.Tables.Add(this.tabledtSubRpt_New);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtNOTOC_New() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtSubRpt_New() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsNOTOC_New ds = new dsNOTOC_New();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dtNOTOC_NewRowChangeEventHandler(object sender, dtNOTOC_NewRowChangeEvent e);
        
        public delegate void dtSubRpt_NewRowChangeEventHandler(object sender, dtSubRpt_NewRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtNOTOC_NewDataTable : global::System.Data.TypedTableBase<dtNOTOC_NewRow> {
            
            private global::System.Data.DataColumn columnLoadingStation;
            
            private global::System.Data.DataColumn columnFlightNumber;
            
            private global::System.Data.DataColumn columnRegistration;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPreparedBy;
            
            private global::System.Data.DataColumn columnLogo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtNOTOC_NewDataTable() {
                this.TableName = "dtNOTOC_New";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtNOTOC_NewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtNOTOC_NewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoadingStationColumn {
                get {
                    return this.columnLoadingStation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlightNumberColumn {
                get {
                    return this.columnFlightNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegistrationColumn {
                get {
                    return this.columnRegistration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreparedByColumn {
                get {
                    return this.columnPreparedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogoColumn {
                get {
                    return this.columnLogo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtNOTOC_NewRow this[int index] {
                get {
                    return ((dtNOTOC_NewRow)(this.Rows[index]));
                }
            }
            
            public event dtNOTOC_NewRowChangeEventHandler dtNOTOC_NewRowChanging;
            
            public event dtNOTOC_NewRowChangeEventHandler dtNOTOC_NewRowChanged;
            
            public event dtNOTOC_NewRowChangeEventHandler dtNOTOC_NewRowDeleting;
            
            public event dtNOTOC_NewRowChangeEventHandler dtNOTOC_NewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtNOTOC_NewRow(dtNOTOC_NewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtNOTOC_NewRow AdddtNOTOC_NewRow(string LoadingStation, string FlightNumber, string Registration, string Date, string PreparedBy, string Logo) {
                dtNOTOC_NewRow rowdtNOTOC_NewRow = ((dtNOTOC_NewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LoadingStation,
                        FlightNumber,
                        Registration,
                        Date,
                        PreparedBy,
                        Logo};
                rowdtNOTOC_NewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtNOTOC_NewRow);
                return rowdtNOTOC_NewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtNOTOC_NewDataTable cln = ((dtNOTOC_NewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtNOTOC_NewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLoadingStation = base.Columns["LoadingStation"];
                this.columnFlightNumber = base.Columns["FlightNumber"];
                this.columnRegistration = base.Columns["Registration"];
                this.columnDate = base.Columns["Date"];
                this.columnPreparedBy = base.Columns["PreparedBy"];
                this.columnLogo = base.Columns["Logo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLoadingStation = new global::System.Data.DataColumn("LoadingStation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadingStation);
                this.columnFlightNumber = new global::System.Data.DataColumn("FlightNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlightNumber);
                this.columnRegistration = new global::System.Data.DataColumn("Registration", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegistration);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPreparedBy = new global::System.Data.DataColumn("PreparedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreparedBy);
                this.columnLogo = new global::System.Data.DataColumn("Logo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogo);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtNOTOC_NewRow NewdtNOTOC_NewRow() {
                return ((dtNOTOC_NewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtNOTOC_NewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtNOTOC_NewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtNOTOC_NewRowChanged != null)) {
                    this.dtNOTOC_NewRowChanged(this, new dtNOTOC_NewRowChangeEvent(((dtNOTOC_NewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtNOTOC_NewRowChanging != null)) {
                    this.dtNOTOC_NewRowChanging(this, new dtNOTOC_NewRowChangeEvent(((dtNOTOC_NewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtNOTOC_NewRowDeleted != null)) {
                    this.dtNOTOC_NewRowDeleted(this, new dtNOTOC_NewRowChangeEvent(((dtNOTOC_NewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtNOTOC_NewRowDeleting != null)) {
                    this.dtNOTOC_NewRowDeleting(this, new dtNOTOC_NewRowChangeEvent(((dtNOTOC_NewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtNOTOC_NewRow(dtNOTOC_NewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsNOTOC_New ds = new dsNOTOC_New();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtNOTOC_NewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtSubRpt_NewDataTable : global::System.Data.TypedTableBase<dtSubRpt_NewRow> {
            
            private global::System.Data.DataColumn columnPOU;
            
            private global::System.Data.DataColumn columnAWBNo;
            
            private global::System.Data.DataColumn columnNoOfPkgs;
            
            private global::System.Data.DataColumn columnUNID;
            
            private global::System.Data.DataColumn columnShipperName;
            
            private global::System.Data.DataColumn columnDivisionClass1;
            
            private global::System.Data.DataColumn columnSubRisk;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnPkgGroup;
            
            private global::System.Data.DataColumn columnCAO;
            
            private global::System.Data.DataColumn columnExemption;
            
            private global::System.Data.DataColumn columnLoadingPos;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSubRpt_NewDataTable() {
                this.TableName = "dtSubRpt_New";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtSubRpt_NewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtSubRpt_NewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POUColumn {
                get {
                    return this.columnPOU;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AWBNoColumn {
                get {
                    return this.columnAWBNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoOfPkgsColumn {
                get {
                    return this.columnNoOfPkgs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNIDColumn {
                get {
                    return this.columnUNID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipperNameColumn {
                get {
                    return this.columnShipperName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DivisionClass1Column {
                get {
                    return this.columnDivisionClass1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubRiskColumn {
                get {
                    return this.columnSubRisk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PkgGroupColumn {
                get {
                    return this.columnPkgGroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CAOColumn {
                get {
                    return this.columnCAO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionColumn {
                get {
                    return this.columnExemption;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoadingPosColumn {
                get {
                    return this.columnLoadingPos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSubRpt_NewRow this[int index] {
                get {
                    return ((dtSubRpt_NewRow)(this.Rows[index]));
                }
            }
            
            public event dtSubRpt_NewRowChangeEventHandler dtSubRpt_NewRowChanging;
            
            public event dtSubRpt_NewRowChangeEventHandler dtSubRpt_NewRowChanged;
            
            public event dtSubRpt_NewRowChangeEventHandler dtSubRpt_NewRowDeleting;
            
            public event dtSubRpt_NewRowChangeEventHandler dtSubRpt_NewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtSubRpt_NewRow(dtSubRpt_NewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSubRpt_NewRow AdddtSubRpt_NewRow(string POU, string AWBNo, string NoOfPkgs, string UNID, string ShipperName, string DivisionClass1, string SubRisk, string Quantity, string PkgGroup, string CAO, string Exemption, string LoadingPos) {
                dtSubRpt_NewRow rowdtSubRpt_NewRow = ((dtSubRpt_NewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        POU,
                        AWBNo,
                        NoOfPkgs,
                        UNID,
                        ShipperName,
                        DivisionClass1,
                        SubRisk,
                        Quantity,
                        PkgGroup,
                        CAO,
                        Exemption,
                        LoadingPos};
                rowdtSubRpt_NewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtSubRpt_NewRow);
                return rowdtSubRpt_NewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtSubRpt_NewDataTable cln = ((dtSubRpt_NewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtSubRpt_NewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPOU = base.Columns["POU"];
                this.columnAWBNo = base.Columns["AWBNo"];
                this.columnNoOfPkgs = base.Columns["NoOfPkgs"];
                this.columnUNID = base.Columns["UNID"];
                this.columnShipperName = base.Columns["ShipperName"];
                this.columnDivisionClass1 = base.Columns["DivisionClass1"];
                this.columnSubRisk = base.Columns["SubRisk"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnPkgGroup = base.Columns["PkgGroup"];
                this.columnCAO = base.Columns["CAO"];
                this.columnExemption = base.Columns["Exemption"];
                this.columnLoadingPos = base.Columns["LoadingPos"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPOU = new global::System.Data.DataColumn("POU", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOU);
                this.columnAWBNo = new global::System.Data.DataColumn("AWBNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAWBNo);
                this.columnNoOfPkgs = new global::System.Data.DataColumn("NoOfPkgs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoOfPkgs);
                this.columnUNID = new global::System.Data.DataColumn("UNID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNID);
                this.columnShipperName = new global::System.Data.DataColumn("ShipperName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipperName);
                this.columnDivisionClass1 = new global::System.Data.DataColumn("DivisionClass1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDivisionClass1);
                this.columnSubRisk = new global::System.Data.DataColumn("SubRisk", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubRisk);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnPkgGroup = new global::System.Data.DataColumn("PkgGroup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPkgGroup);
                this.columnCAO = new global::System.Data.DataColumn("CAO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAO);
                this.columnExemption = new global::System.Data.DataColumn("Exemption", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemption);
                this.columnLoadingPos = new global::System.Data.DataColumn("LoadingPos", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadingPos);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSubRpt_NewRow NewdtSubRpt_NewRow() {
                return ((dtSubRpt_NewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtSubRpt_NewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtSubRpt_NewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtSubRpt_NewRowChanged != null)) {
                    this.dtSubRpt_NewRowChanged(this, new dtSubRpt_NewRowChangeEvent(((dtSubRpt_NewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtSubRpt_NewRowChanging != null)) {
                    this.dtSubRpt_NewRowChanging(this, new dtSubRpt_NewRowChangeEvent(((dtSubRpt_NewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtSubRpt_NewRowDeleted != null)) {
                    this.dtSubRpt_NewRowDeleted(this, new dtSubRpt_NewRowChangeEvent(((dtSubRpt_NewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtSubRpt_NewRowDeleting != null)) {
                    this.dtSubRpt_NewRowDeleting(this, new dtSubRpt_NewRowChangeEvent(((dtSubRpt_NewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtSubRpt_NewRow(dtSubRpt_NewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsNOTOC_New ds = new dsNOTOC_New();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtSubRpt_NewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtNOTOC_NewRow : global::System.Data.DataRow {
            
            private dtNOTOC_NewDataTable tabledtNOTOC_New;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtNOTOC_NewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtNOTOC_New = ((dtNOTOC_NewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoadingStation {
                get {
                    try {
                        return ((string)(this[this.tabledtNOTOC_New.LoadingStationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadingStation\' in table \'dtNOTOC_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNOTOC_New.LoadingStationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlightNumber {
                get {
                    try {
                        return ((string)(this[this.tabledtNOTOC_New.FlightNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlightNumber\' in table \'dtNOTOC_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNOTOC_New.FlightNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Registration {
                get {
                    try {
                        return ((string)(this[this.tabledtNOTOC_New.RegistrationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Registration\' in table \'dtNOTOC_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNOTOC_New.RegistrationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Date {
                get {
                    try {
                        return ((string)(this[this.tabledtNOTOC_New.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'dtNOTOC_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNOTOC_New.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreparedBy {
                get {
                    try {
                        return ((string)(this[this.tabledtNOTOC_New.PreparedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreparedBy\' in table \'dtNOTOC_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNOTOC_New.PreparedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Logo {
                get {
                    try {
                        return ((string)(this[this.tabledtNOTOC_New.LogoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Logo\' in table \'dtNOTOC_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNOTOC_New.LogoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoadingStationNull() {
                return this.IsNull(this.tabledtNOTOC_New.LoadingStationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoadingStationNull() {
                this[this.tabledtNOTOC_New.LoadingStationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlightNumberNull() {
                return this.IsNull(this.tabledtNOTOC_New.FlightNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlightNumberNull() {
                this[this.tabledtNOTOC_New.FlightNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegistrationNull() {
                return this.IsNull(this.tabledtNOTOC_New.RegistrationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegistrationNull() {
                this[this.tabledtNOTOC_New.RegistrationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tabledtNOTOC_New.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tabledtNOTOC_New.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreparedByNull() {
                return this.IsNull(this.tabledtNOTOC_New.PreparedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreparedByNull() {
                this[this.tabledtNOTOC_New.PreparedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogoNull() {
                return this.IsNull(this.tabledtNOTOC_New.LogoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogoNull() {
                this[this.tabledtNOTOC_New.LogoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtSubRpt_NewRow : global::System.Data.DataRow {
            
            private dtSubRpt_NewDataTable tabledtSubRpt_New;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtSubRpt_NewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtSubRpt_New = ((dtSubRpt_NewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POU {
                get {
                    try {
                        return ((string)(this[this.tabledtSubRpt_New.POUColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'POU\' in table \'dtSubRpt_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSubRpt_New.POUColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AWBNo {
                get {
                    try {
                        return ((string)(this[this.tabledtSubRpt_New.AWBNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AWBNo\' in table \'dtSubRpt_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSubRpt_New.AWBNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NoOfPkgs {
                get {
                    try {
                        return ((string)(this[this.tabledtSubRpt_New.NoOfPkgsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NoOfPkgs\' in table \'dtSubRpt_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSubRpt_New.NoOfPkgsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNID {
                get {
                    try {
                        return ((string)(this[this.tabledtSubRpt_New.UNIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UNID\' in table \'dtSubRpt_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSubRpt_New.UNIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShipperName {
                get {
                    try {
                        return ((string)(this[this.tabledtSubRpt_New.ShipperNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShipperName\' in table \'dtSubRpt_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSubRpt_New.ShipperNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DivisionClass1 {
                get {
                    try {
                        return ((string)(this[this.tabledtSubRpt_New.DivisionClass1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DivisionClass1\' in table \'dtSubRpt_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSubRpt_New.DivisionClass1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubRisk {
                get {
                    try {
                        return ((string)(this[this.tabledtSubRpt_New.SubRiskColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubRisk\' in table \'dtSubRpt_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSubRpt_New.SubRiskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Quantity {
                get {
                    try {
                        return ((string)(this[this.tabledtSubRpt_New.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'dtSubRpt_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSubRpt_New.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PkgGroup {
                get {
                    try {
                        return ((string)(this[this.tabledtSubRpt_New.PkgGroupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PkgGroup\' in table \'dtSubRpt_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSubRpt_New.PkgGroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAO {
                get {
                    try {
                        return ((string)(this[this.tabledtSubRpt_New.CAOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CAO\' in table \'dtSubRpt_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSubRpt_New.CAOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Exemption {
                get {
                    try {
                        return ((string)(this[this.tabledtSubRpt_New.ExemptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Exemption\' in table \'dtSubRpt_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSubRpt_New.ExemptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoadingPos {
                get {
                    try {
                        return ((string)(this[this.tabledtSubRpt_New.LoadingPosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadingPos\' in table \'dtSubRpt_New\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSubRpt_New.LoadingPosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOUNull() {
                return this.IsNull(this.tabledtSubRpt_New.POUColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOUNull() {
                this[this.tabledtSubRpt_New.POUColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAWBNoNull() {
                return this.IsNull(this.tabledtSubRpt_New.AWBNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAWBNoNull() {
                this[this.tabledtSubRpt_New.AWBNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoOfPkgsNull() {
                return this.IsNull(this.tabledtSubRpt_New.NoOfPkgsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoOfPkgsNull() {
                this[this.tabledtSubRpt_New.NoOfPkgsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNIDNull() {
                return this.IsNull(this.tabledtSubRpt_New.UNIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNIDNull() {
                this[this.tabledtSubRpt_New.UNIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipperNameNull() {
                return this.IsNull(this.tabledtSubRpt_New.ShipperNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipperNameNull() {
                this[this.tabledtSubRpt_New.ShipperNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDivisionClass1Null() {
                return this.IsNull(this.tabledtSubRpt_New.DivisionClass1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDivisionClass1Null() {
                this[this.tabledtSubRpt_New.DivisionClass1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubRiskNull() {
                return this.IsNull(this.tabledtSubRpt_New.SubRiskColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubRiskNull() {
                this[this.tabledtSubRpt_New.SubRiskColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tabledtSubRpt_New.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tabledtSubRpt_New.QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPkgGroupNull() {
                return this.IsNull(this.tabledtSubRpt_New.PkgGroupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPkgGroupNull() {
                this[this.tabledtSubRpt_New.PkgGroupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAONull() {
                return this.IsNull(this.tabledtSubRpt_New.CAOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAONull() {
                this[this.tabledtSubRpt_New.CAOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionNull() {
                return this.IsNull(this.tabledtSubRpt_New.ExemptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionNull() {
                this[this.tabledtSubRpt_New.ExemptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoadingPosNull() {
                return this.IsNull(this.tabledtSubRpt_New.LoadingPosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoadingPosNull() {
                this[this.tabledtSubRpt_New.LoadingPosColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtNOTOC_NewRowChangeEvent : global::System.EventArgs {
            
            private dtNOTOC_NewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtNOTOC_NewRowChangeEvent(dtNOTOC_NewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtNOTOC_NewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtSubRpt_NewRowChangeEvent : global::System.EventArgs {
            
            private dtSubRpt_NewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSubRpt_NewRowChangeEvent(dtSubRpt_NewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSubRpt_NewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591