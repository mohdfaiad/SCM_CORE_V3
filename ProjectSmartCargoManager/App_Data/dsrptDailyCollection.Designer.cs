//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5477
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ProjectSmartCargoManager.App_Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsrptDailyCollection")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsrptDailyCollection : global::System.Data.DataSet {
        
        private dsrptDailyCollectionDataTable tabledsrptDailyCollection;
        
        private dsrptDailyCollectionSubSalesDataTable tabledsrptDailyCollectionSubSales;
        
        private dsrptDailyCollectionSubCollectionsDataTable tabledsrptDailyCollectionSubCollections;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsrptDailyCollection() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsrptDailyCollection(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dsrptDailyCollection"] != null)) {
                    base.Tables.Add(new dsrptDailyCollectionDataTable(ds.Tables["dsrptDailyCollection"]));
                }
                if ((ds.Tables["dsrptDailyCollectionSubSales"] != null)) {
                    base.Tables.Add(new dsrptDailyCollectionSubSalesDataTable(ds.Tables["dsrptDailyCollectionSubSales"]));
                }
                if ((ds.Tables["dsrptDailyCollectionSubCollections"] != null)) {
                    base.Tables.Add(new dsrptDailyCollectionSubCollectionsDataTable(ds.Tables["dsrptDailyCollectionSubCollections"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dsrptDailyCollectionDataTable _dsrptDailyCollection {
            get {
                return this.tabledsrptDailyCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dsrptDailyCollectionSubSalesDataTable dsrptDailyCollectionSubSales {
            get {
                return this.tabledsrptDailyCollectionSubSales;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dsrptDailyCollectionSubCollectionsDataTable dsrptDailyCollectionSubCollections {
            get {
                return this.tabledsrptDailyCollectionSubCollections;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsrptDailyCollection cln = ((dsrptDailyCollection)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dsrptDailyCollection"] != null)) {
                    base.Tables.Add(new dsrptDailyCollectionDataTable(ds.Tables["dsrptDailyCollection"]));
                }
                if ((ds.Tables["dsrptDailyCollectionSubSales"] != null)) {
                    base.Tables.Add(new dsrptDailyCollectionSubSalesDataTable(ds.Tables["dsrptDailyCollectionSubSales"]));
                }
                if ((ds.Tables["dsrptDailyCollectionSubCollections"] != null)) {
                    base.Tables.Add(new dsrptDailyCollectionSubCollectionsDataTable(ds.Tables["dsrptDailyCollectionSubCollections"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledsrptDailyCollection = ((dsrptDailyCollectionDataTable)(base.Tables["dsrptDailyCollection"]));
            if ((initTable == true)) {
                if ((this.tabledsrptDailyCollection != null)) {
                    this.tabledsrptDailyCollection.InitVars();
                }
            }
            this.tabledsrptDailyCollectionSubSales = ((dsrptDailyCollectionSubSalesDataTable)(base.Tables["dsrptDailyCollectionSubSales"]));
            if ((initTable == true)) {
                if ((this.tabledsrptDailyCollectionSubSales != null)) {
                    this.tabledsrptDailyCollectionSubSales.InitVars();
                }
            }
            this.tabledsrptDailyCollectionSubCollections = ((dsrptDailyCollectionSubCollectionsDataTable)(base.Tables["dsrptDailyCollectionSubCollections"]));
            if ((initTable == true)) {
                if ((this.tabledsrptDailyCollectionSubCollections != null)) {
                    this.tabledsrptDailyCollectionSubCollections.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsrptDailyCollection";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsrptDailyCollection.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledsrptDailyCollection = new dsrptDailyCollectionDataTable();
            base.Tables.Add(this.tabledsrptDailyCollection);
            this.tabledsrptDailyCollectionSubSales = new dsrptDailyCollectionSubSalesDataTable();
            base.Tables.Add(this.tabledsrptDailyCollectionSubSales);
            this.tabledsrptDailyCollectionSubCollections = new dsrptDailyCollectionSubCollectionsDataTable();
            base.Tables.Add(this.tabledsrptDailyCollectionSubCollections);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_dsrptDailyCollection() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedsrptDailyCollectionSubSales() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedsrptDailyCollectionSubCollections() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsrptDailyCollection ds = new dsrptDailyCollection();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dsrptDailyCollectionRowChangeEventHandler(object sender, dsrptDailyCollectionRowChangeEvent e);
        
        public delegate void dsrptDailyCollectionSubSalesRowChangeEventHandler(object sender, dsrptDailyCollectionSubSalesRowChangeEvent e);
        
        public delegate void dsrptDailyCollectionSubCollectionsRowChangeEventHandler(object sender, dsrptDailyCollectionSubCollectionsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dsrptDailyCollectionDataTable : global::System.Data.TypedTableBase<dsrptDailyCollectionRow> {
            
            private global::System.Data.DataColumn columnPreparedBy;
            
            private global::System.Data.DataColumn columnLogo;
            
            private global::System.Data.DataColumn columnPreparedOn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionDataTable() {
                this.TableName = "dsrptDailyCollection";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dsrptDailyCollectionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dsrptDailyCollectionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreparedByColumn {
                get {
                    return this.columnPreparedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogoColumn {
                get {
                    return this.columnLogo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreparedOnColumn {
                get {
                    return this.columnPreparedOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionRow this[int index] {
                get {
                    return ((dsrptDailyCollectionRow)(this.Rows[index]));
                }
            }
            
            public event dsrptDailyCollectionRowChangeEventHandler dsrptDailyCollectionRowChanging;
            
            public event dsrptDailyCollectionRowChangeEventHandler dsrptDailyCollectionRowChanged;
            
            public event dsrptDailyCollectionRowChangeEventHandler dsrptDailyCollectionRowDeleting;
            
            public event dsrptDailyCollectionRowChangeEventHandler dsrptDailyCollectionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddsrptDailyCollectionRow(dsrptDailyCollectionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionRow AdddsrptDailyCollectionRow(string PreparedBy, string Logo, string PreparedOn) {
                dsrptDailyCollectionRow rowdsrptDailyCollectionRow = ((dsrptDailyCollectionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PreparedBy,
                        Logo,
                        PreparedOn};
                rowdsrptDailyCollectionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdsrptDailyCollectionRow);
                return rowdsrptDailyCollectionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dsrptDailyCollectionDataTable cln = ((dsrptDailyCollectionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dsrptDailyCollectionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPreparedBy = base.Columns["PreparedBy"];
                this.columnLogo = base.Columns["Logo"];
                this.columnPreparedOn = base.Columns["PreparedOn"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPreparedBy = new global::System.Data.DataColumn("PreparedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreparedBy);
                this.columnLogo = new global::System.Data.DataColumn("Logo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogo);
                this.columnPreparedOn = new global::System.Data.DataColumn("PreparedOn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreparedOn);
                this.ExtendedProperties.Add("Generator_TablePropName", "_dsrptDailyCollection");
                this.ExtendedProperties.Add("Generator_UserTableName", "dsrptDailyCollection");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionRow NewdsrptDailyCollectionRow() {
                return ((dsrptDailyCollectionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dsrptDailyCollectionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dsrptDailyCollectionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dsrptDailyCollectionRowChanged != null)) {
                    this.dsrptDailyCollectionRowChanged(this, new dsrptDailyCollectionRowChangeEvent(((dsrptDailyCollectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dsrptDailyCollectionRowChanging != null)) {
                    this.dsrptDailyCollectionRowChanging(this, new dsrptDailyCollectionRowChangeEvent(((dsrptDailyCollectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dsrptDailyCollectionRowDeleted != null)) {
                    this.dsrptDailyCollectionRowDeleted(this, new dsrptDailyCollectionRowChangeEvent(((dsrptDailyCollectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dsrptDailyCollectionRowDeleting != null)) {
                    this.dsrptDailyCollectionRowDeleting(this, new dsrptDailyCollectionRowChangeEvent(((dsrptDailyCollectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedsrptDailyCollectionRow(dsrptDailyCollectionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsrptDailyCollection ds = new dsrptDailyCollection();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dsrptDailyCollectionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dsrptDailyCollectionSubSalesDataTable : global::System.Data.TypedTableBase<dsrptDailyCollectionSubSalesRow> {
            
            private global::System.Data.DataColumn columnPPCash;
            
            private global::System.Data.DataColumn columnPPCheck;
            
            private global::System.Data.DataColumn columnCC;
            
            private global::System.Data.DataColumn columnPXCredit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionSubSalesDataTable() {
                this.TableName = "dsrptDailyCollectionSubSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dsrptDailyCollectionSubSalesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dsrptDailyCollectionSubSalesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PPCashColumn {
                get {
                    return this.columnPPCash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PPCheckColumn {
                get {
                    return this.columnPPCheck;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CCColumn {
                get {
                    return this.columnCC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PXCreditColumn {
                get {
                    return this.columnPXCredit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionSubSalesRow this[int index] {
                get {
                    return ((dsrptDailyCollectionSubSalesRow)(this.Rows[index]));
                }
            }
            
            public event dsrptDailyCollectionSubSalesRowChangeEventHandler dsrptDailyCollectionSubSalesRowChanging;
            
            public event dsrptDailyCollectionSubSalesRowChangeEventHandler dsrptDailyCollectionSubSalesRowChanged;
            
            public event dsrptDailyCollectionSubSalesRowChangeEventHandler dsrptDailyCollectionSubSalesRowDeleting;
            
            public event dsrptDailyCollectionSubSalesRowChangeEventHandler dsrptDailyCollectionSubSalesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddsrptDailyCollectionSubSalesRow(dsrptDailyCollectionSubSalesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionSubSalesRow AdddsrptDailyCollectionSubSalesRow(string PPCash, string PPCheck, string CC, string PXCredit) {
                dsrptDailyCollectionSubSalesRow rowdsrptDailyCollectionSubSalesRow = ((dsrptDailyCollectionSubSalesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PPCash,
                        PPCheck,
                        CC,
                        PXCredit};
                rowdsrptDailyCollectionSubSalesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdsrptDailyCollectionSubSalesRow);
                return rowdsrptDailyCollectionSubSalesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dsrptDailyCollectionSubSalesDataTable cln = ((dsrptDailyCollectionSubSalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dsrptDailyCollectionSubSalesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPPCash = base.Columns["PPCash"];
                this.columnPPCheck = base.Columns["PPCheck"];
                this.columnCC = base.Columns["CC"];
                this.columnPXCredit = base.Columns["PXCredit"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPPCash = new global::System.Data.DataColumn("PPCash", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPPCash);
                this.columnPPCheck = new global::System.Data.DataColumn("PPCheck", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPPCheck);
                this.columnCC = new global::System.Data.DataColumn("CC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCC);
                this.columnPXCredit = new global::System.Data.DataColumn("PXCredit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPXCredit);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionSubSalesRow NewdsrptDailyCollectionSubSalesRow() {
                return ((dsrptDailyCollectionSubSalesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dsrptDailyCollectionSubSalesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dsrptDailyCollectionSubSalesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dsrptDailyCollectionSubSalesRowChanged != null)) {
                    this.dsrptDailyCollectionSubSalesRowChanged(this, new dsrptDailyCollectionSubSalesRowChangeEvent(((dsrptDailyCollectionSubSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dsrptDailyCollectionSubSalesRowChanging != null)) {
                    this.dsrptDailyCollectionSubSalesRowChanging(this, new dsrptDailyCollectionSubSalesRowChangeEvent(((dsrptDailyCollectionSubSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dsrptDailyCollectionSubSalesRowDeleted != null)) {
                    this.dsrptDailyCollectionSubSalesRowDeleted(this, new dsrptDailyCollectionSubSalesRowChangeEvent(((dsrptDailyCollectionSubSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dsrptDailyCollectionSubSalesRowDeleting != null)) {
                    this.dsrptDailyCollectionSubSalesRowDeleting(this, new dsrptDailyCollectionSubSalesRowChangeEvent(((dsrptDailyCollectionSubSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedsrptDailyCollectionSubSalesRow(dsrptDailyCollectionSubSalesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsrptDailyCollection ds = new dsrptDailyCollection();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dsrptDailyCollectionSubSalesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dsrptDailyCollectionSubCollectionsDataTable : global::System.Data.TypedTableBase<dsrptDailyCollectionSubCollectionsRow> {
            
            private global::System.Data.DataColumn columnNetCashSales;
            
            private global::System.Data.DataColumn columnCODCollections;
            
            private global::System.Data.DataColumn columnCOICheck;
            
            private global::System.Data.DataColumn columnCOICash;
            
            private global::System.Data.DataColumn columnCashAvailableDeposit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionSubCollectionsDataTable() {
                this.TableName = "dsrptDailyCollectionSubCollections";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dsrptDailyCollectionSubCollectionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dsrptDailyCollectionSubCollectionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NetCashSalesColumn {
                get {
                    return this.columnNetCashSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODCollectionsColumn {
                get {
                    return this.columnCODCollections;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COICheckColumn {
                get {
                    return this.columnCOICheck;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COICashColumn {
                get {
                    return this.columnCOICash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CashAvailableDepositColumn {
                get {
                    return this.columnCashAvailableDeposit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionSubCollectionsRow this[int index] {
                get {
                    return ((dsrptDailyCollectionSubCollectionsRow)(this.Rows[index]));
                }
            }
            
            public event dsrptDailyCollectionSubCollectionsRowChangeEventHandler dsrptDailyCollectionSubCollectionsRowChanging;
            
            public event dsrptDailyCollectionSubCollectionsRowChangeEventHandler dsrptDailyCollectionSubCollectionsRowChanged;
            
            public event dsrptDailyCollectionSubCollectionsRowChangeEventHandler dsrptDailyCollectionSubCollectionsRowDeleting;
            
            public event dsrptDailyCollectionSubCollectionsRowChangeEventHandler dsrptDailyCollectionSubCollectionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddsrptDailyCollectionSubCollectionsRow(dsrptDailyCollectionSubCollectionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionSubCollectionsRow AdddsrptDailyCollectionSubCollectionsRow(string NetCashSales, string CODCollections, string COICheck, string COICash, string CashAvailableDeposit) {
                dsrptDailyCollectionSubCollectionsRow rowdsrptDailyCollectionSubCollectionsRow = ((dsrptDailyCollectionSubCollectionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NetCashSales,
                        CODCollections,
                        COICheck,
                        COICash,
                        CashAvailableDeposit};
                rowdsrptDailyCollectionSubCollectionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdsrptDailyCollectionSubCollectionsRow);
                return rowdsrptDailyCollectionSubCollectionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dsrptDailyCollectionSubCollectionsDataTable cln = ((dsrptDailyCollectionSubCollectionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dsrptDailyCollectionSubCollectionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNetCashSales = base.Columns["NetCashSales"];
                this.columnCODCollections = base.Columns["CODCollections"];
                this.columnCOICheck = base.Columns["COICheck"];
                this.columnCOICash = base.Columns["COICash"];
                this.columnCashAvailableDeposit = base.Columns["CashAvailableDeposit"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNetCashSales = new global::System.Data.DataColumn("NetCashSales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetCashSales);
                this.columnCODCollections = new global::System.Data.DataColumn("CODCollections", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODCollections);
                this.columnCOICheck = new global::System.Data.DataColumn("COICheck", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOICheck);
                this.columnCOICash = new global::System.Data.DataColumn("COICash", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOICash);
                this.columnCashAvailableDeposit = new global::System.Data.DataColumn("CashAvailableDeposit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCashAvailableDeposit);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionSubCollectionsRow NewdsrptDailyCollectionSubCollectionsRow() {
                return ((dsrptDailyCollectionSubCollectionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dsrptDailyCollectionSubCollectionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dsrptDailyCollectionSubCollectionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dsrptDailyCollectionSubCollectionsRowChanged != null)) {
                    this.dsrptDailyCollectionSubCollectionsRowChanged(this, new dsrptDailyCollectionSubCollectionsRowChangeEvent(((dsrptDailyCollectionSubCollectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dsrptDailyCollectionSubCollectionsRowChanging != null)) {
                    this.dsrptDailyCollectionSubCollectionsRowChanging(this, new dsrptDailyCollectionSubCollectionsRowChangeEvent(((dsrptDailyCollectionSubCollectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dsrptDailyCollectionSubCollectionsRowDeleted != null)) {
                    this.dsrptDailyCollectionSubCollectionsRowDeleted(this, new dsrptDailyCollectionSubCollectionsRowChangeEvent(((dsrptDailyCollectionSubCollectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dsrptDailyCollectionSubCollectionsRowDeleting != null)) {
                    this.dsrptDailyCollectionSubCollectionsRowDeleting(this, new dsrptDailyCollectionSubCollectionsRowChangeEvent(((dsrptDailyCollectionSubCollectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedsrptDailyCollectionSubCollectionsRow(dsrptDailyCollectionSubCollectionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsrptDailyCollection ds = new dsrptDailyCollection();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dsrptDailyCollectionSubCollectionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dsrptDailyCollectionRow : global::System.Data.DataRow {
            
            private dsrptDailyCollectionDataTable tabledsrptDailyCollection;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dsrptDailyCollectionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledsrptDailyCollection = ((dsrptDailyCollectionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreparedBy {
                get {
                    try {
                        return ((string)(this[this.tabledsrptDailyCollection.PreparedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreparedBy\' in table \'dsrptDailyCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsrptDailyCollection.PreparedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Logo {
                get {
                    try {
                        return ((string)(this[this.tabledsrptDailyCollection.LogoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Logo\' in table \'dsrptDailyCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsrptDailyCollection.LogoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreparedOn {
                get {
                    try {
                        return ((string)(this[this.tabledsrptDailyCollection.PreparedOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreparedOn\' in table \'dsrptDailyCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsrptDailyCollection.PreparedOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreparedByNull() {
                return this.IsNull(this.tabledsrptDailyCollection.PreparedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreparedByNull() {
                this[this.tabledsrptDailyCollection.PreparedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogoNull() {
                return this.IsNull(this.tabledsrptDailyCollection.LogoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogoNull() {
                this[this.tabledsrptDailyCollection.LogoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreparedOnNull() {
                return this.IsNull(this.tabledsrptDailyCollection.PreparedOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreparedOnNull() {
                this[this.tabledsrptDailyCollection.PreparedOnColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dsrptDailyCollectionSubSalesRow : global::System.Data.DataRow {
            
            private dsrptDailyCollectionSubSalesDataTable tabledsrptDailyCollectionSubSales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dsrptDailyCollectionSubSalesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledsrptDailyCollectionSubSales = ((dsrptDailyCollectionSubSalesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PPCash {
                get {
                    try {
                        return ((string)(this[this.tabledsrptDailyCollectionSubSales.PPCashColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PPCash\' in table \'dsrptDailyCollectionSubSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsrptDailyCollectionSubSales.PPCashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PPCheck {
                get {
                    try {
                        return ((string)(this[this.tabledsrptDailyCollectionSubSales.PPCheckColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PPCheck\' in table \'dsrptDailyCollectionSubSales\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabledsrptDailyCollectionSubSales.PPCheckColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CC {
                get {
                    try {
                        return ((string)(this[this.tabledsrptDailyCollectionSubSales.CCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CC\' in table \'dsrptDailyCollectionSubSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsrptDailyCollectionSubSales.CCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PXCredit {
                get {
                    try {
                        return ((string)(this[this.tabledsrptDailyCollectionSubSales.PXCreditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PXCredit\' in table \'dsrptDailyCollectionSubSales\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabledsrptDailyCollectionSubSales.PXCreditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPPCashNull() {
                return this.IsNull(this.tabledsrptDailyCollectionSubSales.PPCashColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPPCashNull() {
                this[this.tabledsrptDailyCollectionSubSales.PPCashColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPPCheckNull() {
                return this.IsNull(this.tabledsrptDailyCollectionSubSales.PPCheckColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPPCheckNull() {
                this[this.tabledsrptDailyCollectionSubSales.PPCheckColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCCNull() {
                return this.IsNull(this.tabledsrptDailyCollectionSubSales.CCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCCNull() {
                this[this.tabledsrptDailyCollectionSubSales.CCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPXCreditNull() {
                return this.IsNull(this.tabledsrptDailyCollectionSubSales.PXCreditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPXCreditNull() {
                this[this.tabledsrptDailyCollectionSubSales.PXCreditColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dsrptDailyCollectionSubCollectionsRow : global::System.Data.DataRow {
            
            private dsrptDailyCollectionSubCollectionsDataTable tabledsrptDailyCollectionSubCollections;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dsrptDailyCollectionSubCollectionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledsrptDailyCollectionSubCollections = ((dsrptDailyCollectionSubCollectionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NetCashSales {
                get {
                    try {
                        return ((string)(this[this.tabledsrptDailyCollectionSubCollections.NetCashSalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NetCashSales\' in table \'dsrptDailyCollectionSubCollections\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsrptDailyCollectionSubCollections.NetCashSalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODCollections {
                get {
                    try {
                        return ((string)(this[this.tabledsrptDailyCollectionSubCollections.CODCollectionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODCollections\' in table \'dsrptDailyCollectionSubCollection" +
                                "s\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsrptDailyCollectionSubCollections.CODCollectionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COICheck {
                get {
                    try {
                        return ((string)(this[this.tabledsrptDailyCollectionSubCollections.COICheckColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COICheck\' in table \'dsrptDailyCollectionSubCollections\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsrptDailyCollectionSubCollections.COICheckColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COICash {
                get {
                    try {
                        return ((string)(this[this.tabledsrptDailyCollectionSubCollections.COICashColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COICash\' in table \'dsrptDailyCollectionSubCollections\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tabledsrptDailyCollectionSubCollections.COICashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CashAvailableDeposit {
                get {
                    try {
                        return ((string)(this[this.tabledsrptDailyCollectionSubCollections.CashAvailableDepositColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CashAvailableDeposit\' in table \'dsrptDailyCollectionSubColl" +
                                "ections\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsrptDailyCollectionSubCollections.CashAvailableDepositColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNetCashSalesNull() {
                return this.IsNull(this.tabledsrptDailyCollectionSubCollections.NetCashSalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNetCashSalesNull() {
                this[this.tabledsrptDailyCollectionSubCollections.NetCashSalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODCollectionsNull() {
                return this.IsNull(this.tabledsrptDailyCollectionSubCollections.CODCollectionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODCollectionsNull() {
                this[this.tabledsrptDailyCollectionSubCollections.CODCollectionsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOICheckNull() {
                return this.IsNull(this.tabledsrptDailyCollectionSubCollections.COICheckColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOICheckNull() {
                this[this.tabledsrptDailyCollectionSubCollections.COICheckColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOICashNull() {
                return this.IsNull(this.tabledsrptDailyCollectionSubCollections.COICashColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOICashNull() {
                this[this.tabledsrptDailyCollectionSubCollections.COICashColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCashAvailableDepositNull() {
                return this.IsNull(this.tabledsrptDailyCollectionSubCollections.CashAvailableDepositColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCashAvailableDepositNull() {
                this[this.tabledsrptDailyCollectionSubCollections.CashAvailableDepositColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dsrptDailyCollectionRowChangeEvent : global::System.EventArgs {
            
            private dsrptDailyCollectionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionRowChangeEvent(dsrptDailyCollectionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dsrptDailyCollectionSubSalesRowChangeEvent : global::System.EventArgs {
            
            private dsrptDailyCollectionSubSalesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionSubSalesRowChangeEvent(dsrptDailyCollectionSubSalesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionSubSalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dsrptDailyCollectionSubCollectionsRowChangeEvent : global::System.EventArgs {
            
            private dsrptDailyCollectionSubCollectionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionSubCollectionsRowChangeEvent(dsrptDailyCollectionSubCollectionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsrptDailyCollectionSubCollectionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591