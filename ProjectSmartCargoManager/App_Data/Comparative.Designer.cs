//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5420
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ProjectSmartCargoManager.App_Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Comparative")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Comparative : global::System.Data.DataSet {
        
        private dtComparativeDataTable tabledtComparative;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Comparative() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Comparative(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dtComparative"] != null)) {
                    base.Tables.Add(new dtComparativeDataTable(ds.Tables["dtComparative"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtComparativeDataTable dtComparative {
            get {
                return this.tabledtComparative;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Comparative cln = ((Comparative)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dtComparative"] != null)) {
                    base.Tables.Add(new dtComparativeDataTable(ds.Tables["dtComparative"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledtComparative = ((dtComparativeDataTable)(base.Tables["dtComparative"]));
            if ((initTable == true)) {
                if ((this.tabledtComparative != null)) {
                    this.tabledtComparative.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Comparative";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Comparative.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledtComparative = new dtComparativeDataTable();
            base.Tables.Add(this.tabledtComparative);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtComparative() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Comparative ds = new Comparative();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dtComparativeRowChangeEventHandler(object sender, dtComparativeRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtComparativeDataTable : global::System.Data.TypedTableBase<dtComparativeRow> {
            
            private global::System.Data.DataColumn columnSector;
            
            private global::System.Data.DataColumn columnChargableWeight;
            
            private global::System.Data.DataColumn columnGrossRevenue;
            
            private global::System.Data.DataColumn columnCurrentWeekChargableWeight;
            
            private global::System.Data.DataColumn columnCurrentWeekGrossRevenue;
            
            private global::System.Data.DataColumn columnCurrentWeekGrossYeild;
            
            private global::System.Data.DataColumn columnLogo;
            
            private global::System.Data.DataColumn columnGrossYeild;
            
            private global::System.Data.DataColumn columnDiffKilo;
            
            private global::System.Data.DataColumn _columnKilo_;
            
            private global::System.Data.DataColumn columnDiffGross;
            
            private global::System.Data.DataColumn _columnGross_;
            
            private global::System.Data.DataColumn columnDiffYield;
            
            private global::System.Data.DataColumn _columnYield_;
            
            private global::System.Data.DataColumn columnDiffWeightCharged;
            
            private global::System.Data.DataColumn _columnWeightCharged_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtComparativeDataTable() {
                this.TableName = "dtComparative";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtComparativeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtComparativeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectorColumn {
                get {
                    return this.columnSector;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChargableWeightColumn {
                get {
                    return this.columnChargableWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossRevenueColumn {
                get {
                    return this.columnGrossRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentWeekChargableWeightColumn {
                get {
                    return this.columnCurrentWeekChargableWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentWeekGrossRevenueColumn {
                get {
                    return this.columnCurrentWeekGrossRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentWeekGrossYeildColumn {
                get {
                    return this.columnCurrentWeekGrossYeild;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogoColumn {
                get {
                    return this.columnLogo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossYeildColumn {
                get {
                    return this.columnGrossYeild;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiffKiloColumn {
                get {
                    return this.columnDiffKilo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Kilo_Column {
                get {
                    return this._columnKilo_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiffGrossColumn {
                get {
                    return this.columnDiffGross;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Gross_Column {
                get {
                    return this._columnGross_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiffYieldColumn {
                get {
                    return this.columnDiffYield;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Yield_Column {
                get {
                    return this._columnYield_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiffWeightChargedColumn {
                get {
                    return this.columnDiffWeightCharged;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _WeightCharged_Column {
                get {
                    return this._columnWeightCharged_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtComparativeRow this[int index] {
                get {
                    return ((dtComparativeRow)(this.Rows[index]));
                }
            }
            
            public event dtComparativeRowChangeEventHandler dtComparativeRowChanging;
            
            public event dtComparativeRowChangeEventHandler dtComparativeRowChanged;
            
            public event dtComparativeRowChangeEventHandler dtComparativeRowDeleting;
            
            public event dtComparativeRowChangeEventHandler dtComparativeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtComparativeRow(dtComparativeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtComparativeRow AdddtComparativeRow(
                        string Sector, 
                        string ChargableWeight, 
                        string GrossRevenue, 
                        string CurrentWeekChargableWeight, 
                        string CurrentWeekGrossRevenue, 
                        string CurrentWeekGrossYeild, 
                        byte[] Logo, 
                        string GrossYeild, 
                        string DiffKilo, 
                        string _Kilo_, 
                        string DiffGross, 
                        string _Gross_, 
                        string DiffYield, 
                        string _Yield_, 
                        string DiffWeightCharged, 
                        string _WeightCharged_) {
                dtComparativeRow rowdtComparativeRow = ((dtComparativeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Sector,
                        ChargableWeight,
                        GrossRevenue,
                        CurrentWeekChargableWeight,
                        CurrentWeekGrossRevenue,
                        CurrentWeekGrossYeild,
                        Logo,
                        GrossYeild,
                        DiffKilo,
                        _Kilo_,
                        DiffGross,
                        _Gross_,
                        DiffYield,
                        _Yield_,
                        DiffWeightCharged,
                        _WeightCharged_};
                rowdtComparativeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtComparativeRow);
                return rowdtComparativeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtComparativeDataTable cln = ((dtComparativeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtComparativeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSector = base.Columns["Sector"];
                this.columnChargableWeight = base.Columns["ChargableWeight"];
                this.columnGrossRevenue = base.Columns["GrossRevenue"];
                this.columnCurrentWeekChargableWeight = base.Columns["CurrentWeekChargableWeight"];
                this.columnCurrentWeekGrossRevenue = base.Columns["CurrentWeekGrossRevenue"];
                this.columnCurrentWeekGrossYeild = base.Columns["CurrentWeekGrossYeild"];
                this.columnLogo = base.Columns["Logo"];
                this.columnGrossYeild = base.Columns["GrossYeild"];
                this.columnDiffKilo = base.Columns["DiffKilo"];
                this._columnKilo_ = base.Columns["Kilo%"];
                this.columnDiffGross = base.Columns["DiffGross"];
                this._columnGross_ = base.Columns["Gross%"];
                this.columnDiffYield = base.Columns["DiffYield"];
                this._columnYield_ = base.Columns["Yield%"];
                this.columnDiffWeightCharged = base.Columns["DiffWeightCharged"];
                this._columnWeightCharged_ = base.Columns["WeightCharged%"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSector = new global::System.Data.DataColumn("Sector", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSector);
                this.columnChargableWeight = new global::System.Data.DataColumn("ChargableWeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChargableWeight);
                this.columnGrossRevenue = new global::System.Data.DataColumn("GrossRevenue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossRevenue);
                this.columnCurrentWeekChargableWeight = new global::System.Data.DataColumn("CurrentWeekChargableWeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentWeekChargableWeight);
                this.columnCurrentWeekGrossRevenue = new global::System.Data.DataColumn("CurrentWeekGrossRevenue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentWeekGrossRevenue);
                this.columnCurrentWeekGrossYeild = new global::System.Data.DataColumn("CurrentWeekGrossYeild", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentWeekGrossYeild);
                this.columnLogo = new global::System.Data.DataColumn("Logo", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogo);
                this.columnGrossYeild = new global::System.Data.DataColumn("GrossYeild", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossYeild);
                this.columnDiffKilo = new global::System.Data.DataColumn("DiffKilo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiffKilo);
                this._columnKilo_ = new global::System.Data.DataColumn("Kilo%", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnKilo_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnKilo_");
                this._columnKilo_.ExtendedProperties.Add("Generator_UserColumnName", "Kilo%");
                base.Columns.Add(this._columnKilo_);
                this.columnDiffGross = new global::System.Data.DataColumn("DiffGross", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiffGross);
                this._columnGross_ = new global::System.Data.DataColumn("Gross%", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnGross_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnGross_");
                this._columnGross_.ExtendedProperties.Add("Generator_UserColumnName", "Gross%");
                base.Columns.Add(this._columnGross_);
                this.columnDiffYield = new global::System.Data.DataColumn("DiffYield", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiffYield);
                this._columnYield_ = new global::System.Data.DataColumn("Yield%", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnYield_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnYield_");
                this._columnYield_.ExtendedProperties.Add("Generator_UserColumnName", "Yield%");
                base.Columns.Add(this._columnYield_);
                this.columnDiffWeightCharged = new global::System.Data.DataColumn("DiffWeightCharged", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiffWeightCharged);
                this._columnWeightCharged_ = new global::System.Data.DataColumn("WeightCharged%", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnWeightCharged_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnWeightCharged_");
                this._columnWeightCharged_.ExtendedProperties.Add("Generator_UserColumnName", "WeightCharged%");
                base.Columns.Add(this._columnWeightCharged_);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtComparativeRow NewdtComparativeRow() {
                return ((dtComparativeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtComparativeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtComparativeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtComparativeRowChanged != null)) {
                    this.dtComparativeRowChanged(this, new dtComparativeRowChangeEvent(((dtComparativeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtComparativeRowChanging != null)) {
                    this.dtComparativeRowChanging(this, new dtComparativeRowChangeEvent(((dtComparativeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtComparativeRowDeleted != null)) {
                    this.dtComparativeRowDeleted(this, new dtComparativeRowChangeEvent(((dtComparativeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtComparativeRowDeleting != null)) {
                    this.dtComparativeRowDeleting(this, new dtComparativeRowChangeEvent(((dtComparativeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtComparativeRow(dtComparativeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Comparative ds = new Comparative();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtComparativeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtComparativeRow : global::System.Data.DataRow {
            
            private dtComparativeDataTable tabledtComparative;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtComparativeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtComparative = ((dtComparativeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sector {
                get {
                    try {
                        return ((string)(this[this.tabledtComparative.SectorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sector\' in table \'dtComparative\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtComparative.SectorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChargableWeight {
                get {
                    try {
                        return ((string)(this[this.tabledtComparative.ChargableWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChargableWeight\' in table \'dtComparative\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtComparative.ChargableWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GrossRevenue {
                get {
                    try {
                        return ((string)(this[this.tabledtComparative.GrossRevenueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossRevenue\' in table \'dtComparative\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtComparative.GrossRevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrentWeekChargableWeight {
                get {
                    try {
                        return ((string)(this[this.tabledtComparative.CurrentWeekChargableWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentWeekChargableWeight\' in table \'dtComparative\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tabledtComparative.CurrentWeekChargableWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrentWeekGrossRevenue {
                get {
                    try {
                        return ((string)(this[this.tabledtComparative.CurrentWeekGrossRevenueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentWeekGrossRevenue\' in table \'dtComparative\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabledtComparative.CurrentWeekGrossRevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrentWeekGrossYeild {
                get {
                    try {
                        return ((string)(this[this.tabledtComparative.CurrentWeekGrossYeildColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentWeekGrossYeild\' in table \'dtComparative\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtComparative.CurrentWeekGrossYeildColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Logo {
                get {
                    try {
                        return ((byte[])(this[this.tabledtComparative.LogoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Logo\' in table \'dtComparative\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtComparative.LogoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GrossYeild {
                get {
                    try {
                        return ((string)(this[this.tabledtComparative.GrossYeildColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossYeild\' in table \'dtComparative\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtComparative.GrossYeildColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiffKilo {
                get {
                    try {
                        return ((string)(this[this.tabledtComparative.DiffKiloColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiffKilo\' in table \'dtComparative\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtComparative.DiffKiloColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Kilo_ {
                get {
                    try {
                        return ((string)(this[this.tabledtComparative._Kilo_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Kilo%\' in table \'dtComparative\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtComparative._Kilo_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiffGross {
                get {
                    try {
                        return ((string)(this[this.tabledtComparative.DiffGrossColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiffGross\' in table \'dtComparative\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtComparative.DiffGrossColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Gross_ {
                get {
                    try {
                        return ((string)(this[this.tabledtComparative._Gross_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Gross%\' in table \'dtComparative\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtComparative._Gross_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiffYield {
                get {
                    try {
                        return ((string)(this[this.tabledtComparative.DiffYieldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiffYield\' in table \'dtComparative\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtComparative.DiffYieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Yield_ {
                get {
                    try {
                        return ((string)(this[this.tabledtComparative._Yield_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Yield%\' in table \'dtComparative\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtComparative._Yield_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiffWeightCharged {
                get {
                    try {
                        return ((string)(this[this.tabledtComparative.DiffWeightChargedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiffWeightCharged\' in table \'dtComparative\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtComparative.DiffWeightChargedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _WeightCharged_ {
                get {
                    try {
                        return ((string)(this[this.tabledtComparative._WeightCharged_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WeightCharged%\' in table \'dtComparative\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtComparative._WeightCharged_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectorNull() {
                return this.IsNull(this.tabledtComparative.SectorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectorNull() {
                this[this.tabledtComparative.SectorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChargableWeightNull() {
                return this.IsNull(this.tabledtComparative.ChargableWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChargableWeightNull() {
                this[this.tabledtComparative.ChargableWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossRevenueNull() {
                return this.IsNull(this.tabledtComparative.GrossRevenueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossRevenueNull() {
                this[this.tabledtComparative.GrossRevenueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentWeekChargableWeightNull() {
                return this.IsNull(this.tabledtComparative.CurrentWeekChargableWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentWeekChargableWeightNull() {
                this[this.tabledtComparative.CurrentWeekChargableWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentWeekGrossRevenueNull() {
                return this.IsNull(this.tabledtComparative.CurrentWeekGrossRevenueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentWeekGrossRevenueNull() {
                this[this.tabledtComparative.CurrentWeekGrossRevenueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentWeekGrossYeildNull() {
                return this.IsNull(this.tabledtComparative.CurrentWeekGrossYeildColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentWeekGrossYeildNull() {
                this[this.tabledtComparative.CurrentWeekGrossYeildColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogoNull() {
                return this.IsNull(this.tabledtComparative.LogoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogoNull() {
                this[this.tabledtComparative.LogoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossYeildNull() {
                return this.IsNull(this.tabledtComparative.GrossYeildColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossYeildNull() {
                this[this.tabledtComparative.GrossYeildColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiffKiloNull() {
                return this.IsNull(this.tabledtComparative.DiffKiloColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiffKiloNull() {
                this[this.tabledtComparative.DiffKiloColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Kilo_Null() {
                return this.IsNull(this.tabledtComparative._Kilo_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Kilo_Null() {
                this[this.tabledtComparative._Kilo_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiffGrossNull() {
                return this.IsNull(this.tabledtComparative.DiffGrossColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiffGrossNull() {
                this[this.tabledtComparative.DiffGrossColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Gross_Null() {
                return this.IsNull(this.tabledtComparative._Gross_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Gross_Null() {
                this[this.tabledtComparative._Gross_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiffYieldNull() {
                return this.IsNull(this.tabledtComparative.DiffYieldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiffYieldNull() {
                this[this.tabledtComparative.DiffYieldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Yield_Null() {
                return this.IsNull(this.tabledtComparative._Yield_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Yield_Null() {
                this[this.tabledtComparative._Yield_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiffWeightChargedNull() {
                return this.IsNull(this.tabledtComparative.DiffWeightChargedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiffWeightChargedNull() {
                this[this.tabledtComparative.DiffWeightChargedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_WeightCharged_Null() {
                return this.IsNull(this.tabledtComparative._WeightCharged_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_WeightCharged_Null() {
                this[this.tabledtComparative._WeightCharged_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtComparativeRowChangeEvent : global::System.EventArgs {
            
            private dtComparativeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtComparativeRowChangeEvent(dtComparativeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtComparativeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591