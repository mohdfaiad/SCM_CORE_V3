//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ProjectSmartCargoManager.App_Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsOfficialReceipt")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsOfficialReceipt : global::System.Data.DataSet {
        
        private dtOfficialReceiptDataTable tabledtOfficialReceipt;
        
        private dtOfficialReceipt_SubDataTable tabledtOfficialReceipt_Sub;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsOfficialReceipt() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsOfficialReceipt(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dtOfficialReceipt"] != null)) {
                    base.Tables.Add(new dtOfficialReceiptDataTable(ds.Tables["dtOfficialReceipt"]));
                }
                if ((ds.Tables["dtOfficialReceipt_Sub"] != null)) {
                    base.Tables.Add(new dtOfficialReceipt_SubDataTable(ds.Tables["dtOfficialReceipt_Sub"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtOfficialReceiptDataTable dtOfficialReceipt {
            get {
                return this.tabledtOfficialReceipt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtOfficialReceipt_SubDataTable dtOfficialReceipt_Sub {
            get {
                return this.tabledtOfficialReceipt_Sub;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsOfficialReceipt cln = ((dsOfficialReceipt)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dtOfficialReceipt"] != null)) {
                    base.Tables.Add(new dtOfficialReceiptDataTable(ds.Tables["dtOfficialReceipt"]));
                }
                if ((ds.Tables["dtOfficialReceipt_Sub"] != null)) {
                    base.Tables.Add(new dtOfficialReceipt_SubDataTable(ds.Tables["dtOfficialReceipt_Sub"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledtOfficialReceipt = ((dtOfficialReceiptDataTable)(base.Tables["dtOfficialReceipt"]));
            if ((initTable == true)) {
                if ((this.tabledtOfficialReceipt != null)) {
                    this.tabledtOfficialReceipt.InitVars();
                }
            }
            this.tabledtOfficialReceipt_Sub = ((dtOfficialReceipt_SubDataTable)(base.Tables["dtOfficialReceipt_Sub"]));
            if ((initTable == true)) {
                if ((this.tabledtOfficialReceipt_Sub != null)) {
                    this.tabledtOfficialReceipt_Sub.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsOfficialReceipt";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsOfficialReceipt.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledtOfficialReceipt = new dtOfficialReceiptDataTable();
            base.Tables.Add(this.tabledtOfficialReceipt);
            this.tabledtOfficialReceipt_Sub = new dtOfficialReceipt_SubDataTable();
            base.Tables.Add(this.tabledtOfficialReceipt_Sub);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtOfficialReceipt() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtOfficialReceipt_Sub() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsOfficialReceipt ds = new dsOfficialReceipt();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dtOfficialReceiptRowChangeEventHandler(object sender, dtOfficialReceiptRowChangeEvent e);
        
        public delegate void dtOfficialReceipt_SubRowChangeEventHandler(object sender, dtOfficialReceipt_SubRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtOfficialReceiptDataTable : global::System.Data.TypedTableBase<dtOfficialReceiptRow> {
            
            private global::System.Data.DataColumn columnVATRegTIN;
            
            private global::System.Data.DataColumn columnORRecieptNo;
            
            private global::System.Data.DataColumn columnADDRESS;
            
            private global::System.Data.DataColumn columnPermitNo;
            
            private global::System.Data.DataColumn columnApprovedNo;
            
            private global::System.Data.DataColumn columnDateIssued;
            
            private global::System.Data.DataColumn columnLogo;
            
            private global::System.Data.DataColumn columnDomesticAWBNotation;
            
            private global::System.Data.DataColumn columnAWBList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOfficialReceiptDataTable() {
                this.TableName = "dtOfficialReceipt";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtOfficialReceiptDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtOfficialReceiptDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VATRegTINColumn {
                get {
                    return this.columnVATRegTIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORRecieptNoColumn {
                get {
                    return this.columnORRecieptNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESSColumn {
                get {
                    return this.columnADDRESS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitNoColumn {
                get {
                    return this.columnPermitNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedNoColumn {
                get {
                    return this.columnApprovedNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateIssuedColumn {
                get {
                    return this.columnDateIssued;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogoColumn {
                get {
                    return this.columnLogo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DomesticAWBNotationColumn {
                get {
                    return this.columnDomesticAWBNotation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AWBListColumn {
                get {
                    return this.columnAWBList;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOfficialReceiptRow this[int index] {
                get {
                    return ((dtOfficialReceiptRow)(this.Rows[index]));
                }
            }
            
            public event dtOfficialReceiptRowChangeEventHandler dtOfficialReceiptRowChanging;
            
            public event dtOfficialReceiptRowChangeEventHandler dtOfficialReceiptRowChanged;
            
            public event dtOfficialReceiptRowChangeEventHandler dtOfficialReceiptRowDeleting;
            
            public event dtOfficialReceiptRowChangeEventHandler dtOfficialReceiptRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtOfficialReceiptRow(dtOfficialReceiptRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOfficialReceiptRow AdddtOfficialReceiptRow(string VATRegTIN, string ORRecieptNo, string ADDRESS, string PermitNo, string ApprovedNo, string DateIssued, string Logo, string DomesticAWBNotation, string AWBList) {
                dtOfficialReceiptRow rowdtOfficialReceiptRow = ((dtOfficialReceiptRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        VATRegTIN,
                        ORRecieptNo,
                        ADDRESS,
                        PermitNo,
                        ApprovedNo,
                        DateIssued,
                        Logo,
                        DomesticAWBNotation,
                        AWBList};
                rowdtOfficialReceiptRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtOfficialReceiptRow);
                return rowdtOfficialReceiptRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtOfficialReceiptDataTable cln = ((dtOfficialReceiptDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtOfficialReceiptDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVATRegTIN = base.Columns["VATRegTIN"];
                this.columnORRecieptNo = base.Columns["ORRecieptNo"];
                this.columnADDRESS = base.Columns["ADDRESS"];
                this.columnPermitNo = base.Columns["PermitNo"];
                this.columnApprovedNo = base.Columns["ApprovedNo"];
                this.columnDateIssued = base.Columns["DateIssued"];
                this.columnLogo = base.Columns["Logo"];
                this.columnDomesticAWBNotation = base.Columns["DomesticAWBNotation"];
                this.columnAWBList = base.Columns["AWBList"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVATRegTIN = new global::System.Data.DataColumn("VATRegTIN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVATRegTIN);
                this.columnORRecieptNo = new global::System.Data.DataColumn("ORRecieptNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORRecieptNo);
                this.columnADDRESS = new global::System.Data.DataColumn("ADDRESS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS);
                this.columnPermitNo = new global::System.Data.DataColumn("PermitNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitNo);
                this.columnApprovedNo = new global::System.Data.DataColumn("ApprovedNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedNo);
                this.columnDateIssued = new global::System.Data.DataColumn("DateIssued", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateIssued);
                this.columnLogo = new global::System.Data.DataColumn("Logo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogo);
                this.columnDomesticAWBNotation = new global::System.Data.DataColumn("DomesticAWBNotation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDomesticAWBNotation);
                this.columnAWBList = new global::System.Data.DataColumn("AWBList", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAWBList);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOfficialReceiptRow NewdtOfficialReceiptRow() {
                return ((dtOfficialReceiptRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtOfficialReceiptRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtOfficialReceiptRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtOfficialReceiptRowChanged != null)) {
                    this.dtOfficialReceiptRowChanged(this, new dtOfficialReceiptRowChangeEvent(((dtOfficialReceiptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtOfficialReceiptRowChanging != null)) {
                    this.dtOfficialReceiptRowChanging(this, new dtOfficialReceiptRowChangeEvent(((dtOfficialReceiptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtOfficialReceiptRowDeleted != null)) {
                    this.dtOfficialReceiptRowDeleted(this, new dtOfficialReceiptRowChangeEvent(((dtOfficialReceiptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtOfficialReceiptRowDeleting != null)) {
                    this.dtOfficialReceiptRowDeleting(this, new dtOfficialReceiptRowChangeEvent(((dtOfficialReceiptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtOfficialReceiptRow(dtOfficialReceiptRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsOfficialReceipt ds = new dsOfficialReceipt();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtOfficialReceiptDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtOfficialReceipt_SubDataTable : global::System.Data.TypedTableBase<dtOfficialReceipt_SubRow> {
            
            private global::System.Data.DataColumn columnTxt;
            
            private global::System.Data.DataColumn columnValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOfficialReceipt_SubDataTable() {
                this.TableName = "dtOfficialReceipt_Sub";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtOfficialReceipt_SubDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtOfficialReceipt_SubDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TxtColumn {
                get {
                    return this.columnTxt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOfficialReceipt_SubRow this[int index] {
                get {
                    return ((dtOfficialReceipt_SubRow)(this.Rows[index]));
                }
            }
            
            public event dtOfficialReceipt_SubRowChangeEventHandler dtOfficialReceipt_SubRowChanging;
            
            public event dtOfficialReceipt_SubRowChangeEventHandler dtOfficialReceipt_SubRowChanged;
            
            public event dtOfficialReceipt_SubRowChangeEventHandler dtOfficialReceipt_SubRowDeleting;
            
            public event dtOfficialReceipt_SubRowChangeEventHandler dtOfficialReceipt_SubRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtOfficialReceipt_SubRow(dtOfficialReceipt_SubRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOfficialReceipt_SubRow AdddtOfficialReceipt_SubRow(string Txt, string Value) {
                dtOfficialReceipt_SubRow rowdtOfficialReceipt_SubRow = ((dtOfficialReceipt_SubRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Txt,
                        Value};
                rowdtOfficialReceipt_SubRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtOfficialReceipt_SubRow);
                return rowdtOfficialReceipt_SubRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtOfficialReceipt_SubDataTable cln = ((dtOfficialReceipt_SubDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtOfficialReceipt_SubDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTxt = base.Columns["Txt"];
                this.columnValue = base.Columns["Value"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTxt = new global::System.Data.DataColumn("Txt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTxt);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOfficialReceipt_SubRow NewdtOfficialReceipt_SubRow() {
                return ((dtOfficialReceipt_SubRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtOfficialReceipt_SubRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtOfficialReceipt_SubRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtOfficialReceipt_SubRowChanged != null)) {
                    this.dtOfficialReceipt_SubRowChanged(this, new dtOfficialReceipt_SubRowChangeEvent(((dtOfficialReceipt_SubRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtOfficialReceipt_SubRowChanging != null)) {
                    this.dtOfficialReceipt_SubRowChanging(this, new dtOfficialReceipt_SubRowChangeEvent(((dtOfficialReceipt_SubRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtOfficialReceipt_SubRowDeleted != null)) {
                    this.dtOfficialReceipt_SubRowDeleted(this, new dtOfficialReceipt_SubRowChangeEvent(((dtOfficialReceipt_SubRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtOfficialReceipt_SubRowDeleting != null)) {
                    this.dtOfficialReceipt_SubRowDeleting(this, new dtOfficialReceipt_SubRowChangeEvent(((dtOfficialReceipt_SubRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtOfficialReceipt_SubRow(dtOfficialReceipt_SubRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsOfficialReceipt ds = new dsOfficialReceipt();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtOfficialReceipt_SubDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtOfficialReceiptRow : global::System.Data.DataRow {
            
            private dtOfficialReceiptDataTable tabledtOfficialReceipt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtOfficialReceiptRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtOfficialReceipt = ((dtOfficialReceiptDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VATRegTIN {
                get {
                    try {
                        return ((string)(this[this.tabledtOfficialReceipt.VATRegTINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VATRegTIN\' in table \'dtOfficialReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOfficialReceipt.VATRegTINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORRecieptNo {
                get {
                    try {
                        return ((string)(this[this.tabledtOfficialReceipt.ORRecieptNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORRecieptNo\' in table \'dtOfficialReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOfficialReceipt.ORRecieptNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS {
                get {
                    try {
                        return ((string)(this[this.tabledtOfficialReceipt.ADDRESSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADDRESS\' in table \'dtOfficialReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOfficialReceipt.ADDRESSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PermitNo {
                get {
                    try {
                        return ((string)(this[this.tabledtOfficialReceipt.PermitNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitNo\' in table \'dtOfficialReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOfficialReceipt.PermitNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApprovedNo {
                get {
                    try {
                        return ((string)(this[this.tabledtOfficialReceipt.ApprovedNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedNo\' in table \'dtOfficialReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOfficialReceipt.ApprovedNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateIssued {
                get {
                    try {
                        return ((string)(this[this.tabledtOfficialReceipt.DateIssuedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateIssued\' in table \'dtOfficialReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOfficialReceipt.DateIssuedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Logo {
                get {
                    try {
                        return ((string)(this[this.tabledtOfficialReceipt.LogoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Logo\' in table \'dtOfficialReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOfficialReceipt.LogoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DomesticAWBNotation {
                get {
                    try {
                        return ((string)(this[this.tabledtOfficialReceipt.DomesticAWBNotationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DomesticAWBNotation\' in table \'dtOfficialReceipt\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabledtOfficialReceipt.DomesticAWBNotationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AWBList {
                get {
                    try {
                        return ((string)(this[this.tabledtOfficialReceipt.AWBListColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AWBList\' in table \'dtOfficialReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOfficialReceipt.AWBListColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVATRegTINNull() {
                return this.IsNull(this.tabledtOfficialReceipt.VATRegTINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVATRegTINNull() {
                this[this.tabledtOfficialReceipt.VATRegTINColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORRecieptNoNull() {
                return this.IsNull(this.tabledtOfficialReceipt.ORRecieptNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORRecieptNoNull() {
                this[this.tabledtOfficialReceipt.ORRecieptNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESSNull() {
                return this.IsNull(this.tabledtOfficialReceipt.ADDRESSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESSNull() {
                this[this.tabledtOfficialReceipt.ADDRESSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitNoNull() {
                return this.IsNull(this.tabledtOfficialReceipt.PermitNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitNoNull() {
                this[this.tabledtOfficialReceipt.PermitNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedNoNull() {
                return this.IsNull(this.tabledtOfficialReceipt.ApprovedNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedNoNull() {
                this[this.tabledtOfficialReceipt.ApprovedNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateIssuedNull() {
                return this.IsNull(this.tabledtOfficialReceipt.DateIssuedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateIssuedNull() {
                this[this.tabledtOfficialReceipt.DateIssuedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogoNull() {
                return this.IsNull(this.tabledtOfficialReceipt.LogoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogoNull() {
                this[this.tabledtOfficialReceipt.LogoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDomesticAWBNotationNull() {
                return this.IsNull(this.tabledtOfficialReceipt.DomesticAWBNotationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDomesticAWBNotationNull() {
                this[this.tabledtOfficialReceipt.DomesticAWBNotationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAWBListNull() {
                return this.IsNull(this.tabledtOfficialReceipt.AWBListColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAWBListNull() {
                this[this.tabledtOfficialReceipt.AWBListColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtOfficialReceipt_SubRow : global::System.Data.DataRow {
            
            private dtOfficialReceipt_SubDataTable tabledtOfficialReceipt_Sub;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtOfficialReceipt_SubRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtOfficialReceipt_Sub = ((dtOfficialReceipt_SubDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Txt {
                get {
                    try {
                        return ((string)(this[this.tabledtOfficialReceipt_Sub.TxtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Txt\' in table \'dtOfficialReceipt_Sub\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOfficialReceipt_Sub.TxtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tabledtOfficialReceipt_Sub.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'dtOfficialReceipt_Sub\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOfficialReceipt_Sub.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTxtNull() {
                return this.IsNull(this.tabledtOfficialReceipt_Sub.TxtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTxtNull() {
                this[this.tabledtOfficialReceipt_Sub.TxtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tabledtOfficialReceipt_Sub.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tabledtOfficialReceipt_Sub.ValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtOfficialReceiptRowChangeEvent : global::System.EventArgs {
            
            private dtOfficialReceiptRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOfficialReceiptRowChangeEvent(dtOfficialReceiptRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOfficialReceiptRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtOfficialReceipt_SubRowChangeEvent : global::System.EventArgs {
            
            private dtOfficialReceipt_SubRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOfficialReceipt_SubRowChangeEvent(dtOfficialReceipt_SubRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOfficialReceipt_SubRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591