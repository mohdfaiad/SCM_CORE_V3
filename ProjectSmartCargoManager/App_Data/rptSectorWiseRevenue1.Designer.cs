//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5477
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ProjectSmartCargoManager.App_Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("rptSectorWiseRevenue")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class rptSectorWiseRevenue : global::System.Data.DataSet {
        
        private rptSectorWiseRevenueSubDetailDataTable tablerptSectorWiseRevenueSubDetail;
        
        private rptSectorWiseRevenueSubStationDataTable tablerptSectorWiseRevenueSubStation;
        
        private rptSectorWiseRevenueSubONDDataTable tablerptSectorWiseRevenueSubOND;
        
        private rptSectorWiseRevenueSummaryDataTable tablerptSectorWiseRevenueSummary;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rptSectorWiseRevenue() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected rptSectorWiseRevenue(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["rptSectorWiseRevenueSubDetail"] != null)) {
                    base.Tables.Add(new rptSectorWiseRevenueSubDetailDataTable(ds.Tables["rptSectorWiseRevenueSubDetail"]));
                }
                if ((ds.Tables["rptSectorWiseRevenueSubStation"] != null)) {
                    base.Tables.Add(new rptSectorWiseRevenueSubStationDataTable(ds.Tables["rptSectorWiseRevenueSubStation"]));
                }
                if ((ds.Tables["rptSectorWiseRevenueSubOND"] != null)) {
                    base.Tables.Add(new rptSectorWiseRevenueSubONDDataTable(ds.Tables["rptSectorWiseRevenueSubOND"]));
                }
                if ((ds.Tables["rptSectorWiseRevenueSummary"] != null)) {
                    base.Tables.Add(new rptSectorWiseRevenueSummaryDataTable(ds.Tables["rptSectorWiseRevenueSummary"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public rptSectorWiseRevenueSubDetailDataTable rptSectorWiseRevenueSubDetail {
            get {
                return this.tablerptSectorWiseRevenueSubDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public rptSectorWiseRevenueSubStationDataTable rptSectorWiseRevenueSubStation {
            get {
                return this.tablerptSectorWiseRevenueSubStation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public rptSectorWiseRevenueSubONDDataTable rptSectorWiseRevenueSubOND {
            get {
                return this.tablerptSectorWiseRevenueSubOND;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public rptSectorWiseRevenueSummaryDataTable rptSectorWiseRevenueSummary {
            get {
                return this.tablerptSectorWiseRevenueSummary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            rptSectorWiseRevenue cln = ((rptSectorWiseRevenue)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["rptSectorWiseRevenueSubDetail"] != null)) {
                    base.Tables.Add(new rptSectorWiseRevenueSubDetailDataTable(ds.Tables["rptSectorWiseRevenueSubDetail"]));
                }
                if ((ds.Tables["rptSectorWiseRevenueSubStation"] != null)) {
                    base.Tables.Add(new rptSectorWiseRevenueSubStationDataTable(ds.Tables["rptSectorWiseRevenueSubStation"]));
                }
                if ((ds.Tables["rptSectorWiseRevenueSubOND"] != null)) {
                    base.Tables.Add(new rptSectorWiseRevenueSubONDDataTable(ds.Tables["rptSectorWiseRevenueSubOND"]));
                }
                if ((ds.Tables["rptSectorWiseRevenueSummary"] != null)) {
                    base.Tables.Add(new rptSectorWiseRevenueSummaryDataTable(ds.Tables["rptSectorWiseRevenueSummary"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablerptSectorWiseRevenueSubDetail = ((rptSectorWiseRevenueSubDetailDataTable)(base.Tables["rptSectorWiseRevenueSubDetail"]));
            if ((initTable == true)) {
                if ((this.tablerptSectorWiseRevenueSubDetail != null)) {
                    this.tablerptSectorWiseRevenueSubDetail.InitVars();
                }
            }
            this.tablerptSectorWiseRevenueSubStation = ((rptSectorWiseRevenueSubStationDataTable)(base.Tables["rptSectorWiseRevenueSubStation"]));
            if ((initTable == true)) {
                if ((this.tablerptSectorWiseRevenueSubStation != null)) {
                    this.tablerptSectorWiseRevenueSubStation.InitVars();
                }
            }
            this.tablerptSectorWiseRevenueSubOND = ((rptSectorWiseRevenueSubONDDataTable)(base.Tables["rptSectorWiseRevenueSubOND"]));
            if ((initTable == true)) {
                if ((this.tablerptSectorWiseRevenueSubOND != null)) {
                    this.tablerptSectorWiseRevenueSubOND.InitVars();
                }
            }
            this.tablerptSectorWiseRevenueSummary = ((rptSectorWiseRevenueSummaryDataTable)(base.Tables["rptSectorWiseRevenueSummary"]));
            if ((initTable == true)) {
                if ((this.tablerptSectorWiseRevenueSummary != null)) {
                    this.tablerptSectorWiseRevenueSummary.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "rptSectorWiseRevenue";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/rptSectorWiseRevenue.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablerptSectorWiseRevenueSubDetail = new rptSectorWiseRevenueSubDetailDataTable();
            base.Tables.Add(this.tablerptSectorWiseRevenueSubDetail);
            this.tablerptSectorWiseRevenueSubStation = new rptSectorWiseRevenueSubStationDataTable();
            base.Tables.Add(this.tablerptSectorWiseRevenueSubStation);
            this.tablerptSectorWiseRevenueSubOND = new rptSectorWiseRevenueSubONDDataTable();
            base.Tables.Add(this.tablerptSectorWiseRevenueSubOND);
            this.tablerptSectorWiseRevenueSummary = new rptSectorWiseRevenueSummaryDataTable();
            base.Tables.Add(this.tablerptSectorWiseRevenueSummary);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerptSectorWiseRevenueSubDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerptSectorWiseRevenueSubStation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerptSectorWiseRevenueSubOND() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerptSectorWiseRevenueSummary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            rptSectorWiseRevenue ds = new rptSectorWiseRevenue();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void rptSectorWiseRevenueSubDetailRowChangeEventHandler(object sender, rptSectorWiseRevenueSubDetailRowChangeEvent e);
        
        public delegate void rptSectorWiseRevenueSubStationRowChangeEventHandler(object sender, rptSectorWiseRevenueSubStationRowChangeEvent e);
        
        public delegate void rptSectorWiseRevenueSubONDRowChangeEventHandler(object sender, rptSectorWiseRevenueSubONDRowChangeEvent e);
        
        public delegate void rptSectorWiseRevenueSummaryRowChangeEventHandler(object sender, rptSectorWiseRevenueSummaryRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class rptSectorWiseRevenueSubDetailDataTable : global::System.Data.TypedTableBase<rptSectorWiseRevenueSubDetailRow> {
            
            private global::System.Data.DataColumn columnSector;
            
            private global::System.Data.DataColumn columnFlightNo;
            
            private global::System.Data.DataColumn columnGrossWt;
            
            private global::System.Data.DataColumn columnChargeableWt;
            
            private global::System.Data.DataColumn columnWeightCharges;
            
            private global::System.Data.DataColumn columnOthers;
            
            private global::System.Data.DataColumn columnTotalGross;
            
            private global::System.Data.DataColumn columnFSC;
            
            private global::System.Data.DataColumn columnGrossYield;
            
            private global::System.Data.DataColumn columnTotalYield;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubDetailDataTable() {
                this.TableName = "rptSectorWiseRevenueSubDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptSectorWiseRevenueSubDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected rptSectorWiseRevenueSubDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectorColumn {
                get {
                    return this.columnSector;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlightNoColumn {
                get {
                    return this.columnFlightNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossWtColumn {
                get {
                    return this.columnGrossWt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChargeableWtColumn {
                get {
                    return this.columnChargeableWt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightChargesColumn {
                get {
                    return this.columnWeightCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OthersColumn {
                get {
                    return this.columnOthers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalGrossColumn {
                get {
                    return this.columnTotalGross;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSCColumn {
                get {
                    return this.columnFSC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossYieldColumn {
                get {
                    return this.columnGrossYield;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalYieldColumn {
                get {
                    return this.columnTotalYield;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubDetailRow this[int index] {
                get {
                    return ((rptSectorWiseRevenueSubDetailRow)(this.Rows[index]));
                }
            }
            
            public event rptSectorWiseRevenueSubDetailRowChangeEventHandler rptSectorWiseRevenueSubDetailRowChanging;
            
            public event rptSectorWiseRevenueSubDetailRowChangeEventHandler rptSectorWiseRevenueSubDetailRowChanged;
            
            public event rptSectorWiseRevenueSubDetailRowChangeEventHandler rptSectorWiseRevenueSubDetailRowDeleting;
            
            public event rptSectorWiseRevenueSubDetailRowChangeEventHandler rptSectorWiseRevenueSubDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrptSectorWiseRevenueSubDetailRow(rptSectorWiseRevenueSubDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubDetailRow AddrptSectorWiseRevenueSubDetailRow(string Sector, string FlightNo, string GrossWt, string ChargeableWt, string WeightCharges, string Others, string TotalGross, string FSC, string GrossYield, string TotalYield) {
                rptSectorWiseRevenueSubDetailRow rowrptSectorWiseRevenueSubDetailRow = ((rptSectorWiseRevenueSubDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Sector,
                        FlightNo,
                        GrossWt,
                        ChargeableWt,
                        WeightCharges,
                        Others,
                        TotalGross,
                        FSC,
                        GrossYield,
                        TotalYield};
                rowrptSectorWiseRevenueSubDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrptSectorWiseRevenueSubDetailRow);
                return rowrptSectorWiseRevenueSubDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                rptSectorWiseRevenueSubDetailDataTable cln = ((rptSectorWiseRevenueSubDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new rptSectorWiseRevenueSubDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSector = base.Columns["Sector"];
                this.columnFlightNo = base.Columns["FlightNo"];
                this.columnGrossWt = base.Columns["GrossWt"];
                this.columnChargeableWt = base.Columns["ChargeableWt"];
                this.columnWeightCharges = base.Columns["WeightCharges"];
                this.columnOthers = base.Columns["Others"];
                this.columnTotalGross = base.Columns["TotalGross"];
                this.columnFSC = base.Columns["FSC"];
                this.columnGrossYield = base.Columns["GrossYield"];
                this.columnTotalYield = base.Columns["TotalYield"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSector = new global::System.Data.DataColumn("Sector", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSector);
                this.columnFlightNo = new global::System.Data.DataColumn("FlightNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlightNo);
                this.columnGrossWt = new global::System.Data.DataColumn("GrossWt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossWt);
                this.columnChargeableWt = new global::System.Data.DataColumn("ChargeableWt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChargeableWt);
                this.columnWeightCharges = new global::System.Data.DataColumn("WeightCharges", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeightCharges);
                this.columnOthers = new global::System.Data.DataColumn("Others", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOthers);
                this.columnTotalGross = new global::System.Data.DataColumn("TotalGross", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalGross);
                this.columnFSC = new global::System.Data.DataColumn("FSC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSC);
                this.columnGrossYield = new global::System.Data.DataColumn("GrossYield", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossYield);
                this.columnTotalYield = new global::System.Data.DataColumn("TotalYield", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalYield);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubDetailRow NewrptSectorWiseRevenueSubDetailRow() {
                return ((rptSectorWiseRevenueSubDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new rptSectorWiseRevenueSubDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(rptSectorWiseRevenueSubDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.rptSectorWiseRevenueSubDetailRowChanged != null)) {
                    this.rptSectorWiseRevenueSubDetailRowChanged(this, new rptSectorWiseRevenueSubDetailRowChangeEvent(((rptSectorWiseRevenueSubDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.rptSectorWiseRevenueSubDetailRowChanging != null)) {
                    this.rptSectorWiseRevenueSubDetailRowChanging(this, new rptSectorWiseRevenueSubDetailRowChangeEvent(((rptSectorWiseRevenueSubDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.rptSectorWiseRevenueSubDetailRowDeleted != null)) {
                    this.rptSectorWiseRevenueSubDetailRowDeleted(this, new rptSectorWiseRevenueSubDetailRowChangeEvent(((rptSectorWiseRevenueSubDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.rptSectorWiseRevenueSubDetailRowDeleting != null)) {
                    this.rptSectorWiseRevenueSubDetailRowDeleting(this, new rptSectorWiseRevenueSubDetailRowChangeEvent(((rptSectorWiseRevenueSubDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverptSectorWiseRevenueSubDetailRow(rptSectorWiseRevenueSubDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                rptSectorWiseRevenue ds = new rptSectorWiseRevenue();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "rptSectorWiseRevenueSubDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class rptSectorWiseRevenueSubStationDataTable : global::System.Data.TypedTableBase<rptSectorWiseRevenueSubStationRow> {
            
            private global::System.Data.DataColumn columnStation;
            
            private global::System.Data.DataColumn columnGrossWt;
            
            private global::System.Data.DataColumn columnChargeableWt;
            
            private global::System.Data.DataColumn columnWeightCharges;
            
            private global::System.Data.DataColumn columnOthers;
            
            private global::System.Data.DataColumn columnTotalGross;
            
            private global::System.Data.DataColumn columnFSC;
            
            private global::System.Data.DataColumn columnGrossYield;
            
            private global::System.Data.DataColumn columnTotalYield;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubStationDataTable() {
                this.TableName = "rptSectorWiseRevenueSubStation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptSectorWiseRevenueSubStationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected rptSectorWiseRevenueSubStationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StationColumn {
                get {
                    return this.columnStation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossWtColumn {
                get {
                    return this.columnGrossWt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChargeableWtColumn {
                get {
                    return this.columnChargeableWt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightChargesColumn {
                get {
                    return this.columnWeightCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OthersColumn {
                get {
                    return this.columnOthers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalGrossColumn {
                get {
                    return this.columnTotalGross;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSCColumn {
                get {
                    return this.columnFSC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossYieldColumn {
                get {
                    return this.columnGrossYield;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalYieldColumn {
                get {
                    return this.columnTotalYield;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubStationRow this[int index] {
                get {
                    return ((rptSectorWiseRevenueSubStationRow)(this.Rows[index]));
                }
            }
            
            public event rptSectorWiseRevenueSubStationRowChangeEventHandler rptSectorWiseRevenueSubStationRowChanging;
            
            public event rptSectorWiseRevenueSubStationRowChangeEventHandler rptSectorWiseRevenueSubStationRowChanged;
            
            public event rptSectorWiseRevenueSubStationRowChangeEventHandler rptSectorWiseRevenueSubStationRowDeleting;
            
            public event rptSectorWiseRevenueSubStationRowChangeEventHandler rptSectorWiseRevenueSubStationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrptSectorWiseRevenueSubStationRow(rptSectorWiseRevenueSubStationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubStationRow AddrptSectorWiseRevenueSubStationRow(string Station, string GrossWt, string ChargeableWt, string WeightCharges, string Others, string TotalGross, string FSC, string GrossYield, string TotalYield) {
                rptSectorWiseRevenueSubStationRow rowrptSectorWiseRevenueSubStationRow = ((rptSectorWiseRevenueSubStationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Station,
                        GrossWt,
                        ChargeableWt,
                        WeightCharges,
                        Others,
                        TotalGross,
                        FSC,
                        GrossYield,
                        TotalYield};
                rowrptSectorWiseRevenueSubStationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrptSectorWiseRevenueSubStationRow);
                return rowrptSectorWiseRevenueSubStationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                rptSectorWiseRevenueSubStationDataTable cln = ((rptSectorWiseRevenueSubStationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new rptSectorWiseRevenueSubStationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStation = base.Columns["Station"];
                this.columnGrossWt = base.Columns["GrossWt"];
                this.columnChargeableWt = base.Columns["ChargeableWt"];
                this.columnWeightCharges = base.Columns["WeightCharges"];
                this.columnOthers = base.Columns["Others"];
                this.columnTotalGross = base.Columns["TotalGross"];
                this.columnFSC = base.Columns["FSC"];
                this.columnGrossYield = base.Columns["GrossYield"];
                this.columnTotalYield = base.Columns["TotalYield"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStation = new global::System.Data.DataColumn("Station", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStation);
                this.columnGrossWt = new global::System.Data.DataColumn("GrossWt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossWt);
                this.columnChargeableWt = new global::System.Data.DataColumn("ChargeableWt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChargeableWt);
                this.columnWeightCharges = new global::System.Data.DataColumn("WeightCharges", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeightCharges);
                this.columnOthers = new global::System.Data.DataColumn("Others", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOthers);
                this.columnTotalGross = new global::System.Data.DataColumn("TotalGross", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalGross);
                this.columnFSC = new global::System.Data.DataColumn("FSC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSC);
                this.columnGrossYield = new global::System.Data.DataColumn("GrossYield", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossYield);
                this.columnTotalYield = new global::System.Data.DataColumn("TotalYield", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalYield);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubStationRow NewrptSectorWiseRevenueSubStationRow() {
                return ((rptSectorWiseRevenueSubStationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new rptSectorWiseRevenueSubStationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(rptSectorWiseRevenueSubStationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.rptSectorWiseRevenueSubStationRowChanged != null)) {
                    this.rptSectorWiseRevenueSubStationRowChanged(this, new rptSectorWiseRevenueSubStationRowChangeEvent(((rptSectorWiseRevenueSubStationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.rptSectorWiseRevenueSubStationRowChanging != null)) {
                    this.rptSectorWiseRevenueSubStationRowChanging(this, new rptSectorWiseRevenueSubStationRowChangeEvent(((rptSectorWiseRevenueSubStationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.rptSectorWiseRevenueSubStationRowDeleted != null)) {
                    this.rptSectorWiseRevenueSubStationRowDeleted(this, new rptSectorWiseRevenueSubStationRowChangeEvent(((rptSectorWiseRevenueSubStationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.rptSectorWiseRevenueSubStationRowDeleting != null)) {
                    this.rptSectorWiseRevenueSubStationRowDeleting(this, new rptSectorWiseRevenueSubStationRowChangeEvent(((rptSectorWiseRevenueSubStationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverptSectorWiseRevenueSubStationRow(rptSectorWiseRevenueSubStationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                rptSectorWiseRevenue ds = new rptSectorWiseRevenue();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "rptSectorWiseRevenueSubStationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class rptSectorWiseRevenueSubONDDataTable : global::System.Data.TypedTableBase<rptSectorWiseRevenueSubONDRow> {
            
            private global::System.Data.DataColumn columnSector;
            
            private global::System.Data.DataColumn columnGrossWt;
            
            private global::System.Data.DataColumn columnChargeableWt;
            
            private global::System.Data.DataColumn columnWeightCharges;
            
            private global::System.Data.DataColumn columnOthers;
            
            private global::System.Data.DataColumn columnTotalGross;
            
            private global::System.Data.DataColumn columnFSC;
            
            private global::System.Data.DataColumn columnGrossYield;
            
            private global::System.Data.DataColumn columnTotalYield;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubONDDataTable() {
                this.TableName = "rptSectorWiseRevenueSubOND";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptSectorWiseRevenueSubONDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected rptSectorWiseRevenueSubONDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectorColumn {
                get {
                    return this.columnSector;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossWtColumn {
                get {
                    return this.columnGrossWt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChargeableWtColumn {
                get {
                    return this.columnChargeableWt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightChargesColumn {
                get {
                    return this.columnWeightCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OthersColumn {
                get {
                    return this.columnOthers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalGrossColumn {
                get {
                    return this.columnTotalGross;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSCColumn {
                get {
                    return this.columnFSC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossYieldColumn {
                get {
                    return this.columnGrossYield;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalYieldColumn {
                get {
                    return this.columnTotalYield;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubONDRow this[int index] {
                get {
                    return ((rptSectorWiseRevenueSubONDRow)(this.Rows[index]));
                }
            }
            
            public event rptSectorWiseRevenueSubONDRowChangeEventHandler rptSectorWiseRevenueSubONDRowChanging;
            
            public event rptSectorWiseRevenueSubONDRowChangeEventHandler rptSectorWiseRevenueSubONDRowChanged;
            
            public event rptSectorWiseRevenueSubONDRowChangeEventHandler rptSectorWiseRevenueSubONDRowDeleting;
            
            public event rptSectorWiseRevenueSubONDRowChangeEventHandler rptSectorWiseRevenueSubONDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrptSectorWiseRevenueSubONDRow(rptSectorWiseRevenueSubONDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubONDRow AddrptSectorWiseRevenueSubONDRow(string Sector, string GrossWt, string ChargeableWt, string WeightCharges, string Others, string TotalGross, string FSC, string GrossYield, string TotalYield) {
                rptSectorWiseRevenueSubONDRow rowrptSectorWiseRevenueSubONDRow = ((rptSectorWiseRevenueSubONDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Sector,
                        GrossWt,
                        ChargeableWt,
                        WeightCharges,
                        Others,
                        TotalGross,
                        FSC,
                        GrossYield,
                        TotalYield};
                rowrptSectorWiseRevenueSubONDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrptSectorWiseRevenueSubONDRow);
                return rowrptSectorWiseRevenueSubONDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                rptSectorWiseRevenueSubONDDataTable cln = ((rptSectorWiseRevenueSubONDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new rptSectorWiseRevenueSubONDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSector = base.Columns["Sector"];
                this.columnGrossWt = base.Columns["GrossWt"];
                this.columnChargeableWt = base.Columns["ChargeableWt"];
                this.columnWeightCharges = base.Columns["WeightCharges"];
                this.columnOthers = base.Columns["Others"];
                this.columnTotalGross = base.Columns["TotalGross"];
                this.columnFSC = base.Columns["FSC"];
                this.columnGrossYield = base.Columns["GrossYield"];
                this.columnTotalYield = base.Columns["TotalYield"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSector = new global::System.Data.DataColumn("Sector", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSector);
                this.columnGrossWt = new global::System.Data.DataColumn("GrossWt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossWt);
                this.columnChargeableWt = new global::System.Data.DataColumn("ChargeableWt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChargeableWt);
                this.columnWeightCharges = new global::System.Data.DataColumn("WeightCharges", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeightCharges);
                this.columnOthers = new global::System.Data.DataColumn("Others", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOthers);
                this.columnTotalGross = new global::System.Data.DataColumn("TotalGross", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalGross);
                this.columnFSC = new global::System.Data.DataColumn("FSC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSC);
                this.columnGrossYield = new global::System.Data.DataColumn("GrossYield", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossYield);
                this.columnTotalYield = new global::System.Data.DataColumn("TotalYield", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalYield);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubONDRow NewrptSectorWiseRevenueSubONDRow() {
                return ((rptSectorWiseRevenueSubONDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new rptSectorWiseRevenueSubONDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(rptSectorWiseRevenueSubONDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.rptSectorWiseRevenueSubONDRowChanged != null)) {
                    this.rptSectorWiseRevenueSubONDRowChanged(this, new rptSectorWiseRevenueSubONDRowChangeEvent(((rptSectorWiseRevenueSubONDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.rptSectorWiseRevenueSubONDRowChanging != null)) {
                    this.rptSectorWiseRevenueSubONDRowChanging(this, new rptSectorWiseRevenueSubONDRowChangeEvent(((rptSectorWiseRevenueSubONDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.rptSectorWiseRevenueSubONDRowDeleted != null)) {
                    this.rptSectorWiseRevenueSubONDRowDeleted(this, new rptSectorWiseRevenueSubONDRowChangeEvent(((rptSectorWiseRevenueSubONDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.rptSectorWiseRevenueSubONDRowDeleting != null)) {
                    this.rptSectorWiseRevenueSubONDRowDeleting(this, new rptSectorWiseRevenueSubONDRowChangeEvent(((rptSectorWiseRevenueSubONDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverptSectorWiseRevenueSubONDRow(rptSectorWiseRevenueSubONDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                rptSectorWiseRevenue ds = new rptSectorWiseRevenue();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "rptSectorWiseRevenueSubONDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class rptSectorWiseRevenueSummaryDataTable : global::System.Data.TypedTableBase<rptSectorWiseRevenueSummaryRow> {
            
            private global::System.Data.DataColumn columnLogo;
            
            private global::System.Data.DataColumn columnPreparedBy;
            
            private global::System.Data.DataColumn columnPreparedOn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSummaryDataTable() {
                this.TableName = "rptSectorWiseRevenueSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptSectorWiseRevenueSummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected rptSectorWiseRevenueSummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogoColumn {
                get {
                    return this.columnLogo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreparedByColumn {
                get {
                    return this.columnPreparedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreparedOnColumn {
                get {
                    return this.columnPreparedOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSummaryRow this[int index] {
                get {
                    return ((rptSectorWiseRevenueSummaryRow)(this.Rows[index]));
                }
            }
            
            public event rptSectorWiseRevenueSummaryRowChangeEventHandler rptSectorWiseRevenueSummaryRowChanging;
            
            public event rptSectorWiseRevenueSummaryRowChangeEventHandler rptSectorWiseRevenueSummaryRowChanged;
            
            public event rptSectorWiseRevenueSummaryRowChangeEventHandler rptSectorWiseRevenueSummaryRowDeleting;
            
            public event rptSectorWiseRevenueSummaryRowChangeEventHandler rptSectorWiseRevenueSummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrptSectorWiseRevenueSummaryRow(rptSectorWiseRevenueSummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSummaryRow AddrptSectorWiseRevenueSummaryRow(string Logo, string PreparedBy, string PreparedOn) {
                rptSectorWiseRevenueSummaryRow rowrptSectorWiseRevenueSummaryRow = ((rptSectorWiseRevenueSummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Logo,
                        PreparedBy,
                        PreparedOn};
                rowrptSectorWiseRevenueSummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrptSectorWiseRevenueSummaryRow);
                return rowrptSectorWiseRevenueSummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                rptSectorWiseRevenueSummaryDataTable cln = ((rptSectorWiseRevenueSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new rptSectorWiseRevenueSummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLogo = base.Columns["Logo"];
                this.columnPreparedBy = base.Columns["PreparedBy"];
                this.columnPreparedOn = base.Columns["PreparedOn"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLogo = new global::System.Data.DataColumn("Logo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogo);
                this.columnPreparedBy = new global::System.Data.DataColumn("PreparedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreparedBy);
                this.columnPreparedOn = new global::System.Data.DataColumn("PreparedOn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreparedOn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSummaryRow NewrptSectorWiseRevenueSummaryRow() {
                return ((rptSectorWiseRevenueSummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new rptSectorWiseRevenueSummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(rptSectorWiseRevenueSummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.rptSectorWiseRevenueSummaryRowChanged != null)) {
                    this.rptSectorWiseRevenueSummaryRowChanged(this, new rptSectorWiseRevenueSummaryRowChangeEvent(((rptSectorWiseRevenueSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.rptSectorWiseRevenueSummaryRowChanging != null)) {
                    this.rptSectorWiseRevenueSummaryRowChanging(this, new rptSectorWiseRevenueSummaryRowChangeEvent(((rptSectorWiseRevenueSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.rptSectorWiseRevenueSummaryRowDeleted != null)) {
                    this.rptSectorWiseRevenueSummaryRowDeleted(this, new rptSectorWiseRevenueSummaryRowChangeEvent(((rptSectorWiseRevenueSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.rptSectorWiseRevenueSummaryRowDeleting != null)) {
                    this.rptSectorWiseRevenueSummaryRowDeleting(this, new rptSectorWiseRevenueSummaryRowChangeEvent(((rptSectorWiseRevenueSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverptSectorWiseRevenueSummaryRow(rptSectorWiseRevenueSummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                rptSectorWiseRevenue ds = new rptSectorWiseRevenue();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "rptSectorWiseRevenueSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class rptSectorWiseRevenueSubDetailRow : global::System.Data.DataRow {
            
            private rptSectorWiseRevenueSubDetailDataTable tablerptSectorWiseRevenueSubDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptSectorWiseRevenueSubDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerptSectorWiseRevenueSubDetail = ((rptSectorWiseRevenueSubDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sector {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubDetail.SectorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sector\' in table \'rptSectorWiseRevenueSubDetail\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubDetail.SectorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlightNo {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubDetail.FlightNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlightNo\' in table \'rptSectorWiseRevenueSubDetail\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubDetail.FlightNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GrossWt {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubDetail.GrossWtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossWt\' in table \'rptSectorWiseRevenueSubDetail\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubDetail.GrossWtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChargeableWt {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubDetail.ChargeableWtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChargeableWt\' in table \'rptSectorWiseRevenueSubDetail\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubDetail.ChargeableWtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WeightCharges {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubDetail.WeightChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WeightCharges\' in table \'rptSectorWiseRevenueSubDetail\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubDetail.WeightChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Others {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubDetail.OthersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Others\' in table \'rptSectorWiseRevenueSubDetail\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubDetail.OthersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalGross {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubDetail.TotalGrossColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalGross\' in table \'rptSectorWiseRevenueSubDetail\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubDetail.TotalGrossColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FSC {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubDetail.FSCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSC\' in table \'rptSectorWiseRevenueSubDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubDetail.FSCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GrossYield {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubDetail.GrossYieldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossYield\' in table \'rptSectorWiseRevenueSubDetail\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubDetail.GrossYieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalYield {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubDetail.TotalYieldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalYield\' in table \'rptSectorWiseRevenueSubDetail\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubDetail.TotalYieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectorNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubDetail.SectorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectorNull() {
                this[this.tablerptSectorWiseRevenueSubDetail.SectorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlightNoNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubDetail.FlightNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlightNoNull() {
                this[this.tablerptSectorWiseRevenueSubDetail.FlightNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossWtNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubDetail.GrossWtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossWtNull() {
                this[this.tablerptSectorWiseRevenueSubDetail.GrossWtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChargeableWtNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubDetail.ChargeableWtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChargeableWtNull() {
                this[this.tablerptSectorWiseRevenueSubDetail.ChargeableWtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightChargesNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubDetail.WeightChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightChargesNull() {
                this[this.tablerptSectorWiseRevenueSubDetail.WeightChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOthersNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubDetail.OthersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOthersNull() {
                this[this.tablerptSectorWiseRevenueSubDetail.OthersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalGrossNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubDetail.TotalGrossColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalGrossNull() {
                this[this.tablerptSectorWiseRevenueSubDetail.TotalGrossColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSCNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubDetail.FSCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSCNull() {
                this[this.tablerptSectorWiseRevenueSubDetail.FSCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossYieldNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubDetail.GrossYieldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossYieldNull() {
                this[this.tablerptSectorWiseRevenueSubDetail.GrossYieldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalYieldNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubDetail.TotalYieldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalYieldNull() {
                this[this.tablerptSectorWiseRevenueSubDetail.TotalYieldColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class rptSectorWiseRevenueSubStationRow : global::System.Data.DataRow {
            
            private rptSectorWiseRevenueSubStationDataTable tablerptSectorWiseRevenueSubStation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptSectorWiseRevenueSubStationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerptSectorWiseRevenueSubStation = ((rptSectorWiseRevenueSubStationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Station {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubStation.StationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Station\' in table \'rptSectorWiseRevenueSubStation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubStation.StationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GrossWt {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubStation.GrossWtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossWt\' in table \'rptSectorWiseRevenueSubStation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubStation.GrossWtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChargeableWt {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubStation.ChargeableWtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChargeableWt\' in table \'rptSectorWiseRevenueSubStation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubStation.ChargeableWtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WeightCharges {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubStation.WeightChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WeightCharges\' in table \'rptSectorWiseRevenueSubStation\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubStation.WeightChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Others {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubStation.OthersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Others\' in table \'rptSectorWiseRevenueSubStation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubStation.OthersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalGross {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubStation.TotalGrossColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalGross\' in table \'rptSectorWiseRevenueSubStation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubStation.TotalGrossColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FSC {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubStation.FSCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSC\' in table \'rptSectorWiseRevenueSubStation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubStation.FSCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GrossYield {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubStation.GrossYieldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossYield\' in table \'rptSectorWiseRevenueSubStation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubStation.GrossYieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalYield {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubStation.TotalYieldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalYield\' in table \'rptSectorWiseRevenueSubStation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubStation.TotalYieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStationNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubStation.StationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStationNull() {
                this[this.tablerptSectorWiseRevenueSubStation.StationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossWtNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubStation.GrossWtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossWtNull() {
                this[this.tablerptSectorWiseRevenueSubStation.GrossWtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChargeableWtNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubStation.ChargeableWtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChargeableWtNull() {
                this[this.tablerptSectorWiseRevenueSubStation.ChargeableWtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightChargesNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubStation.WeightChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightChargesNull() {
                this[this.tablerptSectorWiseRevenueSubStation.WeightChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOthersNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubStation.OthersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOthersNull() {
                this[this.tablerptSectorWiseRevenueSubStation.OthersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalGrossNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubStation.TotalGrossColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalGrossNull() {
                this[this.tablerptSectorWiseRevenueSubStation.TotalGrossColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSCNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubStation.FSCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSCNull() {
                this[this.tablerptSectorWiseRevenueSubStation.FSCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossYieldNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubStation.GrossYieldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossYieldNull() {
                this[this.tablerptSectorWiseRevenueSubStation.GrossYieldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalYieldNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubStation.TotalYieldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalYieldNull() {
                this[this.tablerptSectorWiseRevenueSubStation.TotalYieldColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class rptSectorWiseRevenueSubONDRow : global::System.Data.DataRow {
            
            private rptSectorWiseRevenueSubONDDataTable tablerptSectorWiseRevenueSubOND;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptSectorWiseRevenueSubONDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerptSectorWiseRevenueSubOND = ((rptSectorWiseRevenueSubONDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sector {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubOND.SectorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sector\' in table \'rptSectorWiseRevenueSubOND\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubOND.SectorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GrossWt {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubOND.GrossWtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossWt\' in table \'rptSectorWiseRevenueSubOND\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubOND.GrossWtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChargeableWt {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubOND.ChargeableWtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChargeableWt\' in table \'rptSectorWiseRevenueSubOND\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubOND.ChargeableWtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WeightCharges {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubOND.WeightChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WeightCharges\' in table \'rptSectorWiseRevenueSubOND\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubOND.WeightChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Others {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubOND.OthersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Others\' in table \'rptSectorWiseRevenueSubOND\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubOND.OthersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalGross {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubOND.TotalGrossColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalGross\' in table \'rptSectorWiseRevenueSubOND\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubOND.TotalGrossColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FSC {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubOND.FSCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSC\' in table \'rptSectorWiseRevenueSubOND\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubOND.FSCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GrossYield {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubOND.GrossYieldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossYield\' in table \'rptSectorWiseRevenueSubOND\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubOND.GrossYieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalYield {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSubOND.TotalYieldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalYield\' in table \'rptSectorWiseRevenueSubOND\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSubOND.TotalYieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectorNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubOND.SectorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectorNull() {
                this[this.tablerptSectorWiseRevenueSubOND.SectorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossWtNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubOND.GrossWtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossWtNull() {
                this[this.tablerptSectorWiseRevenueSubOND.GrossWtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChargeableWtNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubOND.ChargeableWtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChargeableWtNull() {
                this[this.tablerptSectorWiseRevenueSubOND.ChargeableWtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightChargesNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubOND.WeightChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightChargesNull() {
                this[this.tablerptSectorWiseRevenueSubOND.WeightChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOthersNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubOND.OthersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOthersNull() {
                this[this.tablerptSectorWiseRevenueSubOND.OthersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalGrossNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubOND.TotalGrossColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalGrossNull() {
                this[this.tablerptSectorWiseRevenueSubOND.TotalGrossColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSCNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubOND.FSCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSCNull() {
                this[this.tablerptSectorWiseRevenueSubOND.FSCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossYieldNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubOND.GrossYieldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossYieldNull() {
                this[this.tablerptSectorWiseRevenueSubOND.GrossYieldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalYieldNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSubOND.TotalYieldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalYieldNull() {
                this[this.tablerptSectorWiseRevenueSubOND.TotalYieldColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class rptSectorWiseRevenueSummaryRow : global::System.Data.DataRow {
            
            private rptSectorWiseRevenueSummaryDataTable tablerptSectorWiseRevenueSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptSectorWiseRevenueSummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerptSectorWiseRevenueSummary = ((rptSectorWiseRevenueSummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Logo {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSummary.LogoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Logo\' in table \'rptSectorWiseRevenueSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSummary.LogoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreparedBy {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSummary.PreparedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreparedBy\' in table \'rptSectorWiseRevenueSummary\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSummary.PreparedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreparedOn {
                get {
                    try {
                        return ((string)(this[this.tablerptSectorWiseRevenueSummary.PreparedOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreparedOn\' in table \'rptSectorWiseRevenueSummary\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablerptSectorWiseRevenueSummary.PreparedOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogoNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSummary.LogoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogoNull() {
                this[this.tablerptSectorWiseRevenueSummary.LogoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreparedByNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSummary.PreparedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreparedByNull() {
                this[this.tablerptSectorWiseRevenueSummary.PreparedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreparedOnNull() {
                return this.IsNull(this.tablerptSectorWiseRevenueSummary.PreparedOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreparedOnNull() {
                this[this.tablerptSectorWiseRevenueSummary.PreparedOnColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class rptSectorWiseRevenueSubDetailRowChangeEvent : global::System.EventArgs {
            
            private rptSectorWiseRevenueSubDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubDetailRowChangeEvent(rptSectorWiseRevenueSubDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class rptSectorWiseRevenueSubStationRowChangeEvent : global::System.EventArgs {
            
            private rptSectorWiseRevenueSubStationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubStationRowChangeEvent(rptSectorWiseRevenueSubStationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubStationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class rptSectorWiseRevenueSubONDRowChangeEvent : global::System.EventArgs {
            
            private rptSectorWiseRevenueSubONDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubONDRowChangeEvent(rptSectorWiseRevenueSubONDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSubONDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class rptSectorWiseRevenueSummaryRowChangeEvent : global::System.EventArgs {
            
            private rptSectorWiseRevenueSummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSummaryRowChangeEvent(rptSectorWiseRevenueSummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptSectorWiseRevenueSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591